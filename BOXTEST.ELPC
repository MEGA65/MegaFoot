' Bounding box collision tester
' -----------------------------
#output "boxtest"


'------------
.declarations
'------------
#declare x1, y1, x2, y2
#declare x, y, idx, a$, xinc, yinc

#struct BOX x1, y1, x2, y2

#define BOX1 = 0
#define BOX2 = 1

#define X1 = 0
#define Y1 = 1
#define X2 = 2
#define Y2 = 3

#declare bx(2,3)

bx(BOX1, X1) = 5
bx(BOX1, Y1) = 5
bx(BOX1, X2) = 10
bx(BOX1, Y2) = 10

bx(BOX2, X1) = 15
bx(BOX2, Y1) = 15
bx(BOX2, X2) = 20
bx(BOX2, Y2) = 20

#define KEY_UP = "{x91}"
#define KEY_DOWN = "{x11}"
#define KEY_LEFT = "{x9D}"
#define KEY_RIGHT = "{x1D}"


'----
.main
'----
  print chr$(147);chr$(142);

  do while 1
    gosub draw_boxes
    gosub check_box_collision
    gosub get_user_input
  loop


'-------------------
.check_box_collision
'-------------------
  if not (bx(BOX2, X1) > bx(BOX1, X2) or {x5F}
          bx(BOX2, X2) < bx(BOX1, X1) or {x5F}
          bx(BOX2, Y1) > bx(BOX1, Y2) or {x5F}
          bx(BOX2, Y2) < bx(BOX1, Y1)) then {x5F}
  begin
    border 2
  bend:else begin
    border 7
  bend
  return


'--------------
.get_user_input
'--------------
  get key a$

  xinc = 0
  yinc = 0

  if a$ = KEY_UP then yinc = -1
  if a$ = KEY_DOWN then yinc = 1
  if a$ = KEY_LEFT then xinc = -1
  if a$ = KEY_RIGHT then xinc = 1

  bx(BOX1, X1) = bx(BOX1, X1) + xinc
  bx(BOX1, Y1) = bx(BOX1, Y1) + yinc
  bx(BOX1, X2) = bx(BOX1, X2) + xinc
  bx(BOX1, Y2) = bx(BOX1, Y2) + yinc

  bend


'----------
.draw_boxes
'----------
  print chr$(147);

  for idx = BOX1 to BOX2
    x1 = bx(idx, X1)
    y1 = bx(idx, Y1)
    x2 = bx(idx, X2)
    y2 = bx(idx, Y2)
    gosub draw_box
  next idx
  return


'--------
.draw_box
'--------
  ' draw corners
  ' ------------
  cursor x1, y1 : print "{x12}°";
  cursor x2, y1 : print "{x12}®";
  cursor x1, y2 : print "{x12}­";
  cursor x2, y2 : print "{x12}½";

  ' draw horizontals
  ' ----------------
  for x = x1+1 to x2-1
    cursor x,y1 : print "{x12}À";
    cursor x,y2 : print "{x12}C";
  next x

  ' draw verticals
  ' --------------
  for y = y1+1 to y2-1
    cursor x1,y : print "{x12}B";
    cursor x2,y : print "{x12}B";
  next y

  return
ÿ