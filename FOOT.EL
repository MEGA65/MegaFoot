' вAY OF THE иMPLODING фOOT' -------------------------' а COLLABORATIVE TEAM-EFFORT GAME MADE BY THE мега65 COMMUNITY'' гURCE:' - иNITIAL BACKGROUND ART AND еLEVEN CODE INFRASTRUCTURE#OUTPUT "FOOT"' банк4 мEMORY USAGE' ------------------' 4.0000 дма-лист' 4.0100 сунсет палеттес (EACH PALETTE IS 16*3 IN SIZE, HAVE 12 PALETTES)' 4.0800 сцреен меморы' 4.2000 петсции грапхицс' банк5 мEMORY USAGE' ------------------' 5.0000 SCREEN BUFFER' 5.1000 COLOR RAM BUFFER' 5.2000 DOUBLED-UP LAYER BUFFER.PETSCII VARS'------------#DECLARE DATA╞ADDR = $42000#DECLARE MAX╞FRAMES#DECLARE FRAME╞ADDR(64)#DECLARE FRAME╞DBLUP╞ADDR(64)#DECLARE JDIR╞RAW, JFIRE, JDIR#DECLARE FRM╞IDX = 0#DECLARE FRMW, FRMH,FRMX,FRMY,FRMX1,FRMY1,FRAMEIDX,CDATA╞ADDR#DECLARE YY, SCRADDR,CLRADDR#DECLARE A$, LIDX, K, X, Y#DECLARE SRC╞ADDR, DEST╞ADDR, LENGTH, TRANSP#DECLARE DEST╞MB╞SEL, DEST╞BANK#DECLARE DBLUP╞ADDR = $52000#DECLARE KNEEL╞FLAG = 0#DECLARE MIRROR#DECLARE PX, PY ' PLAYER X,Y#DECLARE BX, BY ' BADDIE X,Y#DECLARE PLAYER╞ENERGY = 18#DECLARE BADDIE╞ENERGY = 18.IMGS'----#DEFINE имг╞цлоудс = 0#DEFINE имг╞скы = 1#DEFINE имг╞лт╞моунт = 2#DEFINE имг╞дк╞моунт = 3#DEFINE имг╞ватер = 4#DEFINE имг╞хи╞гроунд = 5#DEFINE имг╞ло╞гроунд = 6#DEFINE имг╞сун = 7#DEFINE имг╞пвалк1 = 8#DEFINE имг╞пвалк2 = 9#DEFINE имг╞пвалк3 = 10#DEFINE имг╞ппунцх1 = 11#DEFINE имг╞ппунцх2 = 12#DEFINE имг╞ппунцх3 = 13#DEFINE имг╞пкицк1 = 14#DEFINE имг╞пкицк2 = 15#DEFINE имг╞пкицк3 = 16#DEFINE имг╞пкнеел1 = 17#DEFINE имг╞пкнеел2 = 18#DEFINE имг╞пкнеел3 = 19#DEFINE имг╞пкпунцх1 = 20#DEFINE имг╞пкпунцх2 = 21#DEFINE имг╞пкпунцх3 = 22#DEFINE имг╞пккицк1 = 23#DEFINE имг╞пккицк2 = 24#DEFINE имг╞пккицк3 = 25#DEFINE имг╞пдие1 = 26#DEFINE имг╞пдие2 = 27#DEFINE имг╞пдие3 = 28#DEFINE имг╞пдие4 = 29#DEFINE имг╞пдие5 = 30#DEFINE имг╞двалк1 = 31#DEFINE имг╞двалк2 = 32#DEFINE имг╞двалк3 = 33#DEFINE имг╞дяуацк1 = 34#DEFINE имг╞дяуацк2 = 35#DEFINE имг╞дяуацк3 = 36#DEFINE имг╞ддие1 = 37#DEFINE имг╞ддие2 = 38#DEFINE имг╞ддие3 = 39#DEFINE имг╞ддие4 = 40#DEFINE имг╞ддие5 = 41#DEFINE хигхест╞лаыер = 7#DECLARE FX, FY#DECLARE XOFFS(хигхест╞лаыер) ' OFFSET INTO CYCLING OF GRAPHIC#DECLARE DRAW╞ORDER(хигхест╞лаыер)DRAW╞ORDER(0) = имг╞скыDRAW╞ORDER(1) = имг╞сунDRAW╞ORDER(2) = имг╞цлоудсDRAW╞ORDER(3) = имг╞лт╞моунтDRAW╞ORDER(4) = имг╞дк╞моунтDRAW╞ORDER(5) = имг╞ватерDRAW╞ORDER(6) = имг╞хи╞гроундDRAW╞ORDER(7) = имг╞ло╞гроунд#DECLARE OFFS╞AMOUNT(хигхест╞лаыер)OFFS╞AMOUNT(0) = .7OFFS╞AMOUNT(1) = 0OFFS╞AMOUNT(2) = .1OFFS╞AMOUNT(3) = .5OFFS╞AMOUNT(4) = 1OFFS╞AMOUNT(5) = 1.5OFFS╞AMOUNT(6) = 2#DECLARE PALIDX, PTR.ANIMS'-----#DEFINE аним╞пвалк = 0#DEFINE аним╞ппунцх = 1#DEFINE аним╞пкицк = 2#DEFINE аним╞пкнеел╞дн = 3#DEFINE аним╞пкнеел╞уп = 4#DEFINE аним╞пкпунцх = 5#DEFINE аним╞пккицк = 6#DEFINE аним╞пдие = 7#DEFINE аним╞двалк = 8#DEFINE аним╞дяуацк = 9#DEFINE аним╞ддие = 10#DEFINE аним╞маь = 11#DECLARE ANIM╞ORDER(аним╞маь, 10)ANIM╞ORDER(аним╞пвалк, 0) = имг╞пвалк1ANIM╞ORDER(аним╞пвалк, 1) = имг╞пвалк2ANIM╞ORDER(аним╞пвалк, 2) = имг╞пвалк3ANIM╞ORDER(аним╞пвалк, 3) = имг╞пвалк2ANIM╞ORDER(аним╞ппунцх, 0) = имг╞ппунцх1ANIM╞ORDER(аним╞ппунцх, 1) = имг╞ппунцх2ANIM╞ORDER(аним╞ппунцх, 2) = имг╞ппунцх3ANIM╞ORDER(аним╞ппунцх, 3) = имг╞ппунцх2ANIM╞ORDER(аним╞ппунцх, 4) = имг╞ппунцх1ANIM╞ORDER(аним╞пкицк, 0) = имг╞пкицк1ANIM╞ORDER(аним╞пкицк, 1) = имг╞пкицк2ANIM╞ORDER(аним╞пкицк, 2) = имг╞пкицк3ANIM╞ORDER(аним╞пкицк, 3) = имг╞пкицк2ANIM╞ORDER(аним╞пкицк, 4) = имг╞пкицк1ANIM╞ORDER(аним╞пкнеел╞дн, 0) = имг╞пкнеел1ANIM╞ORDER(аним╞пкнеел╞дн, 1) = имг╞пкнеел2ANIM╞ORDER(аним╞пкнеел╞дн, 2) = имг╞пкнеел3ANIM╞ORDER(аним╞пкнеел╞уп, 0) = имг╞пкнеел2ANIM╞ORDER(аним╞пкнеел╞уп, 1) = имг╞пкнеел1ANIM╞ORDER(аним╞пкпунцх, 0) = имг╞пкпунцх1ANIM╞ORDER(аним╞пкпунцх, 1) = имг╞пкпунцх2ANIM╞ORDER(аним╞пкпунцх, 2) = имг╞пкпунцх3ANIM╞ORDER(аним╞пкпунцх, 3) = имг╞пкпунцх2ANIM╞ORDER(аним╞пкпунцх, 4) = имг╞пкпунцх1ANIM╞ORDER(аним╞пккицк, 0) = имг╞пккицк1ANIM╞ORDER(аним╞пккицк, 1) = имг╞пккицк2ANIM╞ORDER(аним╞пккицк, 2) = имг╞пккицк3ANIM╞ORDER(аним╞пккицк, 3) = имг╞пккицк2ANIM╞ORDER(аним╞пккицк, 4) = имг╞пккицк1ANIM╞ORDER(аним╞пдие, 0) = имг╞пдие1ANIM╞ORDER(аним╞пдие, 1) = имг╞пдие2ANIM╞ORDER(аним╞пдие, 2) = имг╞пдие3ANIM╞ORDER(аним╞пдие, 3) = имг╞пдие4ANIM╞ORDER(аним╞пдие, 4) = имг╞пдие5ANIM╞ORDER(аним╞пдие, 5) = имг╞пдие5ANIM╞ORDER(аним╞пдие, 6) = имг╞пдие5ANIM╞ORDER(аним╞пдие, 7) = имг╞пдие5ANIM╞ORDER(аним╞пдие, 8) = имг╞пдие5ANIM╞ORDER(аним╞двалк, 0) = имг╞двалк1ANIM╞ORDER(аним╞двалк, 1) = имг╞двалк2ANIM╞ORDER(аним╞двалк, 2) = имг╞двалк3ANIM╞ORDER(аним╞двалк, 3) = имг╞двалк2ANIM╞ORDER(аним╞дяуацк, 0) = имг╞дяуацк1ANIM╞ORDER(аним╞дяуацк, 1) = имг╞дяуацк2ANIM╞ORDER(аним╞дяуацк, 2) = имг╞дяуацк3ANIM╞ORDER(аним╞дяуацк, 3) = имг╞дяуацк2ANIM╞ORDER(аним╞дяуацк, 4) = имг╞дяуацк1ANIM╞ORDER(аним╞ддие, 0) = имг╞ддие1ANIM╞ORDER(аним╞ддие, 1) = имг╞ддие2ANIM╞ORDER(аним╞ддие, 2) = имг╞ддие3ANIM╞ORDER(аним╞ддие, 3) = имг╞ддие4ANIM╞ORDER(аним╞ддие, 4) = имг╞ддие5ANIM╞ORDER(аним╞ддие, 5) = имг╞ддие5ANIM╞ORDER(аним╞ддие, 6) = имг╞ддие5ANIM╞ORDER(аним╞ддие, 7) = имг╞ддие5ANIM╞ORDER(аним╞ддие, 8) = имг╞ддие5#DECLARE MAX╞FRAME(аним╞маь)MAX╞FRAME(аним╞пвалк) = 4MAX╞FRAME(аним╞ппунцх) = 5MAX╞FRAME(аним╞пкицк) = 5MAX╞FRAME(аним╞пкнеел╞дн) = 3MAX╞FRAME(аним╞пкнеел╞уп) = 2MAX╞FRAME(аним╞пкпунцх) = 5MAX╞FRAME(аним╞пккицк) = 5MAX╞FRAME(аним╞пдие) = 9MAX╞FRAME(аним╞двалк) = 4MAX╞FRAME(аним╞дяуацк) = 5MAX╞FRAME(аним╞ддие) = 9.FANIM#DEFINE форм╞хуман = 0#DEFINE форм╞дуцк = 1#DECLARE PLAYER╞FORM = 0 ' хуман#DEFINE фаним╞валк = 0#DEFINE фаним╞пунцх = 1#DEFINE фаним╞кицк = 2#DEFINE фаним╞кнеел╞дн = 3#DEFINE фаним╞кнеел╞уп = 4#DEFINE фаним╞кпунцх = 5#DEFINE фаним╞ккицк = 6#DEFINE фаним╞дие = 7#DEFINE фаним╞маь = 8#DECLARE FORM╞ANIM(2, фаним╞маь)FORM╞ANIM(форм╞хуман, фаним╞валк) = аним╞пвалкFORM╞ANIM(форм╞хуман, фаним╞пунцх) = аним╞ппунцхFORM╞ANIM(форм╞хуман, фаним╞кицк) = аним╞пкицкFORM╞ANIM(форм╞хуман, фаним╞кнеел╞дн) = аним╞пкнеел╞днFORM╞ANIM(форм╞хуман, фаним╞кнеел╞уп) = аним╞пкнеел╞упFORM╞ANIM(форм╞хуман, фаним╞кпунцх) = аним╞пкпунцхFORM╞ANIM(форм╞хуман, фаним╞ккицк) = аним╞пккицкFORM╞ANIM(форм╞хуман, фаним╞дие) = аним╞пдиеFORM╞ANIM(форм╞дуцк, фаним╞валк) = аним╞двалкFORM╞ANIM(форм╞дуцк, фаним╞пунцх) = аним╞дяуацкFORM╞ANIM(форм╞дуцк, фаним╞дие) = аним╞ддие#DECLARE PLAYER╞FRAME = 0#DECLARE PLAYER╞ANIM = 0 ' аним╞пвалк#DECLARE BADDIE╞FRAME = 0#DECLARE BADDIE╞ANIM = 0 ' аним╞пвалк'----.MAIN'----PRINT CHR$(27)+"5"PRINT CHR$(147);BORDER 0BACKGROUND 0GOSUB LOAD╞DATAPALIDX = 0GOSUB SET╞PALETTE.LOOP0  GOSUB INIT╞VARS  GOSUB SHOW╞TITLE  GOSUB GAMEPLAY  ' GOSUB GAMEOVER  GOTO LOOP0'---------------.TRANSPARENT╞DMA'---------------  WPOKE $40009, SRC╞ADDR  WPOKE $4000C, DEST╞ADDR  WPOKE $40007, LENGTH  POKE  $40004, TRANSP  POKE $D702, 4 ' DMA LIST IN BANK 4  POKE $D701, $00 ' DMA LIST MSB  POKE $D705, $00 ' DMA LIST LSB  RETURN'----------.SHOW╞TITLE'----------  PRINT CHR$(147);  PRINT "вAY OF THE иMPLODING фOOT"  PRINT "========================="  PRINT "а GAME MADE BY THE мега65 COMMUNITY!"  GET KEY A$  A$=""  RETURN'---------.LOAD╞DATA'---------  ' формат:  ' ------  ' - тHE SAME AS USED BY ьANADU GRAB TOOL?  ' - сAVE OUT A FILE FOR PARALLAX LAYERS  ' - сAVE OUT A FILE FOR SPRITES  BLOAD "REPAIRED.BIN",P($42000)  GOSUB INIT╞PETSCII╞FRAMES  GOSUB PREPARE╞DOUBLE╞COPY╞LAYER  BLOAD "PAL.BIN",P($40100),R  RETURN'-----------.SET╞PALETTE'----------- (PALIDX)  PTR = $40100 + PALIDX * 16 * 3  FOR K = 0 TO 15    ' RED    POKE $D100 + K + 16, PEEK(PTR)    PTR = PTR + 1    ' GREEN    POKE $D200 + K + 16, PEEK(PTR)    PTR = PTR + 1    ' BLUE    POKE $D300 + K + 16, PEEK(PTR)    PTR = PTR + 1  NEXT K  RETURN'---------.INIT╞VARS'---------  ' CLEAR DMA LIST AREA  FOR K = 0 TO 20    POKE $40000+K, 0  NEXT K  POKE $40000, $81 ' OPT = DEST ADDR мб SELECTOR  POKE $40001, $00 ' DEFAULT TO 1ST MEGABYTE  POKE $40002, $07 ' OPT = ENABLE TRANSPARENCY  POKE $40003, $86 ' OPT = SET TRANSPARENCY  POKE $40004, $20 ' TRANSPARENCY VALUE  POKE $40005, $00 ' END OF OPTIONS  POKE $40006, $00 ' цмд LSB = цопы  WPOKE $40007, $0000 ' LENGTH  WPOKE $40009, $1000 ' SOURCE ADDR  POKE $4000B, $05    ' SOURCE BANK  WPOKE $4000C, $1000 ' DEST ADDR  POKE $4000E, $05    ' DEST BANK  POKE $4000F, $00    ' цмд MSB (IGNORE)  WPOKE $40010, $0000 ' MODULO (IGNORE)  ' CLEAR THE OFFSCREEN BUFFER  EDMA 3, $F00, 160, $50000  EDMA 3, $A0, $20, $50F00  EDMA 3, $FA0, $4F, $51000  KNEEL╞FLAG = 0  PLAYER╞FORM = форм╞хуман  PLAYER╞FRAME = 0  PLAYER╞ANIM = FORM╞ANIM(PLAYER╞FORM, фаним╞валк)  PX = 0 : PY = 23  BX = 60 : BY = 23  RETURN'-------------------.INIT╞PETSCII╞FRAMES'-------------------  MAX╞FRAMES = PEEK(DATA╞ADDR)  DATA╞ADDR = DATA╞ADDR + 1  DO WHILE FRM╞IDX < MAX╞FRAMES    FRAME╞ADDR(FRM╞IDX) = DATA╞ADDR    DATA╞ADDR = DATA╞ADDR + 2    FRMW = PEEK(DATA╞ADDR)    DATA╞ADDR = DATA╞ADDR + 1    FRMH = PEEK(DATA╞ADDR)    DATA╞ADDR = DATA╞ADDR + 1    DATA╞ADDR = DATA╞ADDR + FRMW * FRMH    ':PRINT CHR$(147);"FRM╞IDX=";FRM╞IDX    FRM╞IDX = FRM╞IDX + 1  LOOP  RETURN'-------------------------.PREPARE╞DOUBLE╞COPY╞LAYER'-------------------------  DBLUP╞ADDR = $52000  FOR FRAMEIDX = 0 TO хигхест╞лаыер    DATA╞ADDR = FRAME╞ADDR(FRAMEIDX)    FRMX = PEEK(DATA╞ADDR)    DATA╞ADDR = DATA╞ADDR + 1    FRMY = PEEK(DATA╞ADDR)    DATA╞ADDR = DATA╞ADDR + 1    FRMW = PEEK(DATA╞ADDR)    DATA╞ADDR = DATA╞ADDR + 1    FRMH = PEEK(DATA╞ADDR)    DATA╞ADDR = DATA╞ADDR + 1    FRMX1=FRMX+FRMW-1    FRMY1=FRMY+FRMH-1    FRAME╞DBLUP╞ADDR(FRAMEIDX) = DBLUP╞ADDR    ' цопы цолор FOR EACH ROW TWICE INTO SOME LOCATION IN DBLUP╞ADDR    FOR Y = FRMY TO FRMY1      FOR K = 0 TO 1          ' COPY IT TO SOME PLACE IN $5.2000          EDMA 0, FRMW, DATA╞ADDR, DBLUP╞ADDR          DBLUP╞ADDR = DBLUP╞ADDR + FRMW      NEXT K      DATA╞ADDR = DATA╞ADDR + FRMW    NEXT Y  NEXT FRAMEIDX  RETURN'---------------.DRAW╞BACKGROUND'---------------   '   FRAMEIDX = имг╞сун   '   GOSUB DRAW╞PETSCII╞LAYER    '   RETURN  POKE $4000B, $05  ' ASSURE SOURCE BANK 5 (FOR DOUBLED-UP LAYERS)  FOR LIDX = 0 TO хигхест╞лаыер     ' IF LAYER╞VISIBLE[LIDX] = 1 THEN BEGIN       FRAMEIDX = DRAW╞ORDER(LIDX)       GOSUB DRAW╞PETSCII╞LAYER      'BEND  NEXT LIDX  RETURN'----------.MOVE╞RIGHT'----------  IF PX < 25 THEN BEGIN    PX = PX + 1  BEND:ELSE BEGIN    IF BX > 0 THEN BEGIN      GOSUB INCR╞OFFS      BX = BX - 1    BEND  BEND  KNEEL╞FLAG = 0  RETURN'---------.MOVE╞LEFT'---------  IF PX > 0 THEN BEGIN    PX = PX - 1  BEND:ELSE BEGIN    IF BX < 60 THEN BEGIN      GOSUB DECR╞OFFS      BX = BX + 1    BEND  BEND  KNEEL╞FLAG = 0  RETURN#DEFINE й╞уп = 1#DEFINE й╞уп╞ригхт = 2#DEFINE й╞ригхт = 3#DEFINE й╞довн╞ригхт = 4#DEFINE й╞довн = 5#DEFINE й╞довн╞лефт = 6#DEFINE й╞лефт = 7#DEFINE й╞уп╞лефт = 8#DEFINE й╞фире = 128'--------------.GET╞USER╞INPUT'--------------  GET A$  JDIR╞RAW = JOY(2)  JFIRE = JDIR╞RAW AND 128  JDIR = JDIR╞RAW AND $7F  ' HANDLE NO INPUT CASES  ' ---------------------  IF JDIR╞RAW=0 AND PLAYER╞ANIM = аним╞пкнеел╞дн THEN BEGIN    IF PLAYER╞FRAME >= MAX╞FRAME(аним╞пкнеел╞дн)-1 THEN BEGIN    KNEEL╞FLAG = 0    PLAYER╞ANIM = аним╞пкнеел╞уп    PLAYER╞FRAME = 0    BEND  BEND  IF JDIR╞RAW = 0 THEN RETURN  ' HANDLE CASES WITH SOME INPUT  ' ----------------------------  IF JDIR=й╞ригхт THEN GOSUB MOVE╞RIGHT  IF JDIR=й╞лефт THEN GOSUB MOVE╞LEFT  IF A$="," AND PALIDX>0 THEN PALIDX=PALIDX-1:GOSUB SET╞PALETTE  IF A$="." AND PALIDX<11 THEN PALIDX=PALIDX+1:GOSUB SET╞PALETTE  IF JFIRE=128 AND JDIR=й╞уп╞ригхт AND PLAYER╞ANIM = FORM╞ANIM(PLAYER╞FORM, фаним╞валк) THEN BEGIN    PLAYER╞ANIM = FORM╞ANIM(PLAYER╞FORM, фаним╞пунцх)    IF KNEEL╞FLAG = 1 THEN PLAYER╞ANIM = аним╞пкпунцх    PLAYER╞FRAME = 0  BEND  IF JFIRE=128 AND JDIR=й╞довн╞ригхт AND PLAYER╞ANIM = аним╞пвалк THEN BEGIN    PLAYER╞ANIM = аним╞пкицк    IF KNEEL╞FLAG = 1 THEN PLAYER╞ANIM = аним╞пккицк    PLAYER╞FRAME = 0  BEND  IF A$="X" THEN BEGIN    KNEEL╞FLAG = 0    PLAYER╞ANIM = FORM╞ANIM(PLAYER╞FORM, фаним╞дие)    PLAYER╞FRAME = 0  BEND  IF JDIR=й╞довн AND PLAYER╞ANIM = аним╞пвалк THEN BEGIN    PLAYER╞ANIM = аним╞пкнеел╞дн    PLAYER╞FRAME = 0  BEND  ' D = TOGGLE BETWEEN HUMAN AND DUCK  IF A$="D" THEN BEGIN    IF PLAYER╞FORM = форм╞хуман THEN BEGIN      PLAYER╞FORM = форм╞дуцк    BEND:ELSE BEGIN      PLAYER╞FORM = форм╞хуман    BEND    PLAYER╞ANIM = FORM╞ANIM(PLAYER╞FORM, фаним╞валк)    PLAYER╞FRAME = 0    KNEEL╞FLAG = 0  BEND  RETURN'-----------.DRAW╞PLAYER'-----------  FRAMEIDX = ANIM╞ORDER(PLAYER╞ANIM, PLAYER╞FRAME)  FX=PX : FY=PY  MIRROR = 0  GOSUB DRAW╞PETSCII╞FRAME  RETURN'-----------.DRAW╞BADDIE'-----------  FRAMEIDX = ANIM╞ORDER(BADDIE╞ANIM, BADDIE╞FRAME)  FX=BX : FY=BY  MIRROR = 1  GOSUB DRAW╞PETSCII╞FRAME  RETURN'--------------------------.CONSIDER╞NEXT╞PLAYER╞FRAME'--------------------------  IF PLAYER╞ANIM = FORM╞ANIM(PLAYER╞FORM, фаним╞валк) AND (JDIR=й╞лефт OR JDIR=й╞ригхт) THEN BEGIN    PLAYER╞FRAME = PLAYER╞FRAME + 1  BEND  IF PLAYER╞ANIM <> FORM╞ANIM(PLAYER╞FORM, фаним╞валк) THEN BEGIN    PLAYER╞FRAME = PLAYER╞FRAME + 1  BEND  IF PLAYER╞ANIM = аним╞пкнеел╞дн AND JDIR=й╞довн THEN BEGIN    IF PLAYER╞FRAME >= MAX╞FRAME(аним╞пкнеел╞дн) THEN BEGIN      PLAYER╞FRAME = MAX╞FRAME(аним╞пкнеел╞дн) - 1      KNEEL╞FLAG = 1    BEND    RETURN  BEND  IF PLAYER╞FRAME >= MAX╞FRAME(PLAYER╞ANIM) THEN BEGIN    IF PLAYER╞ANIM = аним╞пдие THEN BEGIN      PLAYER╞ANIM = аним╞пкнеел╞уп      PLAYER╞FRAME = 0      RETURN    BEND    IF KNEEL╞FLAG = 1 AND PLAYER╞ANIM <> аним╞пкнеел╞дн THEN BEGIN      PLAYER╞ANIM = аним╞пкнеел╞дн      PLAYER╞FRAME = MAX╞FRAME(аним╞пкнеел╞дн) - 1    BEND:ELSE BEGIN      PLAYER╞ANIM = FORM╞ANIM(PLAYER╞FORM, фаним╞валк)      PLAYER╞FRAME = 0    BEND  BEND  RETURN'--------------------------.CONSIDER╞NEXT╞BADDIE╞FRAME'--------------------------  IF BADDIE╞ANIM <> аним╞пвалк THEN BEGIN    BADDIE╞FRAME = MOD(BADDIE╞FRAME + 1, MAX╞FRAME(BADDIE╞ANIM))  BEND  GOSUB IF╞PLAYER╞FAR╞WALK╞CLOSER  GOSUB IF╞PLAYER╞NEARER╞WALK╞CAUTIOUS  GOSUB IF╞PLAYER╞HITTABLE╞TRY╞HITTING  ' IF PLAYER IS TRYING TO HIT ME, CONSIDER FLEEING  RETURN'------------------------------.IF╞PLAYER╞HITTABLE╞TRY╞HITTING'------------------------------  ' IF PLAYER IS WITHIN HITTING DISTANCE, CONSIDER HITTING  IF ABS(PX-BX) >= 8 AND BADDIE╞ANIM = аним╞пвалк THEN BEGIN    K = INT(RND(1)*8)    IF K = 1 THEN BADDIE╞ANIM = аним╞ппунцх:BADDIE╞FRAME=0    IF K = 2 THEN BADDIE╞ANIM = аним╞пкицк:BADDIE╞FRAME=0  BEND  RETURN'------------------------------.IF╞PLAYER╞NEARER╞WALK╞CAUTIOUS'------------------------------  ' IF PLAYER IS NEARER, WALK AHEAD MORE CAUTIOUSLY  IF ABS(PX-BX) > 8 THEN BEGIN    IF INT(RND(1)*4) >= 3 THEN GOSUB MOVE╞BADDIE╞CLOSER  BEND  RETURN'-------------------------.IF╞PLAYER╞FAR╞WALK╞CLOSER'-------------------------  ' IF PLAYER IS A LONG DISTANCE AWAY, COMMIT TO WALKING CLOSER  IF ABS(PX-BX) > 20 THEN BEGIN    GOSUB MOVE╞BADDIE╞CLOSER  BEND  RETURN'------------------.MOVE╞BADDIE╞CLOSER'------------------  BADDIE╞ANIM = аним╞пвалк  BADDIE╞FRAME = BADDIE╞FRAME + 1  IF BADDIE╞FRAME >= MAX╞FRAME(BADDIE╞ANIM) THEN BADDIE╞FRAME = 0  IF BX > PX THEN BEGIN    BX = BX - 1  BEND:ELSE BEGIN    BX = BX + 1  BEND  RETURN'------------------.DRAW╞PETSCII╞FRAME'------------------  POKE $4000B, $04  ' ASSURE SOURCE BANK 4 (FOR ORIGINAL FRAME DATA)  IF MIRROR = 1 THEN SETBIT $40006, 5:ELSE CLRBIT $40006, 5  DATA╞ADDR = FRAME╞ADDR(FRAMEIDX)  FRMX = PEEK(DATA╞ADDR)  DATA╞ADDR = DATA╞ADDR + 1  FRMY = PEEK(DATA╞ADDR)  DATA╞ADDR = DATA╞ADDR + 1  FRMW = PEEK(DATA╞ADDR)  DATA╞ADDR = DATA╞ADDR + 1  FRMH = PEEK(DATA╞ADDR)  DATA╞ADDR = DATA╞ADDR + 1  FRMX = FX ' OVERRIDE POSITION  FRMY = FY  FRMX1=FRMX+FRMW-1  FRMY1=FRMY+FRMH-1  CLRADDR = $51000 + FRMX + FRMY * 80  IF MIRROR = 1 THEN CLRADDR = CLRADDR + FRMW - 1  CDATA╞ADDR = DATA╞ADDR  FOR YY=FRMY TO FRMY1    ' DRAW CHARS    ' ----------    SRC╞ADDR = CDATA╞ADDR    DEST╞ADDR = CLRADDR    LENGTH = FRMW    TRANSP = $FF    GOSUB TRANSPARENT╞DMA    CDATA╞ADDR = CDATA╞ADDR + FRMW    CLRADDR = CLRADDR + 80    NEXT YY  RETURN'------------------.DRAW╞PETSCII╞LAYER'------------------  CLRBIT $40006, 5  DATA╞ADDR = FRAME╞ADDR(FRAMEIDX)  FRMX = PEEK(DATA╞ADDR)  DATA╞ADDR = DATA╞ADDR + 1  FRMY = PEEK(DATA╞ADDR)  DATA╞ADDR = DATA╞ADDR + 1  FRMW = PEEK(DATA╞ADDR)  DATA╞ADDR = DATA╞ADDR + 1  FRMH = PEEK(DATA╞ADDR)  DATA╞ADDR = DATA╞ADDR + 1  FRMX1=FRMX+FRMW-1  FRMY1=FRMY+FRMH-1  SCRADDR = $50000 + FRMX + FRMY * 80  ' TODO - REMOVE  CLRADDR = $51000 + FRMX + FRMY * 80  CDATA╞ADDR = DATA╞ADDR + FRMW * FRMH  XOFFS(FRAMEIDX) = MOD(XOFFS(FRAMEIDX) + 80, 80)  XOFFS = INT(XOFFS(FRAMEIDX))  CDATA╞ADDR = FRAME╞DBLUP╞ADDR(FRAMEIDX)  FOR YY=FRMY TO FRMY1    ' DRAW CHARS FROM OFFSET TO END    ' -----------------------------    SRC╞ADDR = CDATA╞ADDR + XOFFS    DEST╞ADDR = CLRADDR    LENGTH = FRMW    TRANSP = $FF    GOSUB TRANSPARENT╞DMA    CDATA╞ADDR = CDATA╞ADDR + FRMW * 2    CLRADDR = CLRADDR + 80    NEXT YY  RETURN'--------.GAMEPLAY'--------  GOSUB GET╞USER╞INPUT  GOSUB DRAW╞BACKGROUND  GOSUB DRAW╞SPRITES  GOSUB PAGE╞FLIP  GOSUB GAME╞LOGIC  GOSUB DRAW╞ENERGY╞BARS  GOTO GAMEPLAY  RETURN'----------------.DRAW╞ENERGY╞BARS'----------------  FOR K = 1 TO PLAYER╞ENERGY    GOSUB DRAW╞BLUE╞TRIANGLE  NEXT K  FOR K = 1 TO BADDIE╞ENERGY    GOSUB DRAW╞RED╞TRIANGLE  NEXT K    RETURN'------------------.DRAW╞BLUE╞TRIANGLE'------------------  CURSOR 1 + K * 2, 48:PRINT " ъ";  CURSOR 1 + K * 2, 49:PRINT "▓╘";  RETURN'------------------.DRAW╞RED╞TRIANGLE'------------------  CURSOR 78 - K * 2, 48:PRINT "√╘";  CURSOR 78 - K * 2, 49:PRINT "▓ъ";  RETURN'------------.DRAW╞SPRITES'------------  GOSUB DRAW╞BADDIE  GOSUB DRAW╞PLAYER  RETURN'----------.GAME╞LOGIC'----------  GOSUB CONSIDER╞NEXT╞PLAYER╞FRAME  GOSUB CONSIDER╞NEXT╞BADDIE╞FRAME  RETURN'---------.PAGE╞FLIP'---------  EDMA 0, $FA0, $50000, $40800  EDMA 0, $FA0, $51000, $FF80000  ' FILL THE TOP PART  EDMA 3, $F00, $4F, $51000  RETURN'---------.INCR╞OFFS'---------  FOR K = 0 TO хигхест╞лаыер    XOFFS(K) = XOFFS(K) + OFFS╞AMOUNT(K)  NEXT K  RETURN'---------.DECR╞OFFS'---------  FOR K = 0 TO хигхест╞лаыер    XOFFS(K) = XOFFS(K) - OFFS╞AMOUNT(K)  NEXT K  RETURN