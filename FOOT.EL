' вAY OF THE иMPLODING фOOT' -------------------------' а COLLABORATIVE TEAM-EFFORT GAME MADE BY THE мега65 COMMUNITY'' гURCE:' -----' - иNITIAL BACKGROUND ART' - еLEVEN CODE INFRASTRUCTURE' - иNITIAL гAME MECHANICS' дEFT:' ----' - аRTISTIC PLAYER HEAD PERMUTATIONS#OUTPUT "FOOT"' банк4 мEMORY USAGE' ------------------' 4.0000 дма-лист' 4.0100 сунсет палеттес (EACH PALETTE IS 16*3 IN SIZE, HAVE 12 PALETTES)' 4.0800 сцреен меморы' 4.2000 петсции грапхицс' банк5 мEMORY USAGE' ------------------' 5.0000 SCREEN BUFFER' 5.1000 COLOR RAM BUFFER' 5.2000 DOUBLED-UP LAYER BUFFER' UNCOMMENT THIS LINE TO ADD DEBUG OUTPUT#DECLARE дебуг = 0.PETSCII VARS'------------#DEFINE форм╞лаыер   = 0#DEFINE форм╞хуман   = 1#DEFINE форм╞дуцк    = 2#DEFINE форм╞маь     = 3#DEFINE дат╞лаыер   = 0#DEFINE дат╞плаыер1 = 1#DEFINE дат╞плаыер2 = 2#DEFINE дат╞плаыер3 = 3#DEFINE дат╞плаыер4 = 4#DEFINE дат╞дуцк    = 5#DEFINE дат╞маь     = 6#DECLARE DATA╞ADDR = $42000#DECLARE MAX╞FRAMES(форм╞маь)#DECLARE FRAME╞ADDR(дат╞маь, 25)#DECLARE FRAME╞DBLUP╞ADDR(64)#DECLARE JDIR╞RAW, JFIRE, JDIR#DECLARE FRM╞IDX = 0#DECLARE FRMW, FRMH,FRMX,FRMY,FRMX1,FRMY1,FRAMEIDX,CDATA╞ADDR#DECLARE YY, SCRADDR,CLRADDR#DECLARE A$, LIDX, K, X, Y#DECLARE SRC╞ADDR, DEST╞ADDR, LENGTH, TRANSP#DECLARE DEST╞MB╞SEL, DEST╞BANK#DECLARE FORM, SZ#DEFINE плаыер = 0#DEFINE баддие = 1#DECLARE CHARACTER#DECLARE OPPONENT╞DATA╞ADDR#DECLARE DBLUP╞ADDR = $52000#DECLARE KNEEL╞FLAG#DECLARE BADDIE╞KNEEL╞FLAG#DECLARE MIRROR, PLAYER╞MIRROR, BADDIE╞MIRROR, OPPONENT╞MIRROR, TMP╞MIRROR#DECLARE PX, PY ' PLAYER X,Y#DECLARE BX, BY ' BADDIE X,Y#DECLARE PLAYER╞ENERGY = 18#DECLARE LAG╞PENERGY = 0#DECLARE BADDIE╞ENERGY = 18#DECLARE LAG╞BENERGY = 0#DECLARE X1,Y1,X2,Y2, DRAW╞COLOR, IDX, TMPX1#DECLARE P╞X1, P╞Y1, P╞X2, P╞Y2#DECLARE O╞X1, O╞Y1, O╞X2, O╞Y2#DECLARE RET%#DECLARE DAT╞IDX, PLAYER╞DAT╞IDX, BADDIE╞DAT╞IDX#DECLARE PLAYER╞DAT╞FIXED, BADDIE╞DAT╞FIXED#DECLARE TMP#DEFINE цхар╞боь╞тл = 112#DEFINE цхар╞боь╞тр = 110#DEFINE цхар╞боь╞бл = 109#DEFINE цхар╞боь╞бр = 125#DEFINE цхар╞хорз   = 64#DEFINE цхар╞жерт   = 93#DEFINE цхар╞спаце  = 32.JOYSTICK╞DEFS'-------------#DEFINE й╞уп = 1#DEFINE й╞уп╞ригхт = 2#DEFINE й╞ригхт = 3#DEFINE й╞довн╞ригхт = 4#DEFINE й╞довн = 5#DEFINE й╞довн╞лефт = 6#DEFINE й╞лефт = 7#DEFINE й╞уп╞лефт = 8#DEFINE й╞фире = 128#DEFINE йд╞уп = 1#DEFINE йд╞уп╞форвард = 2#DEFINE йд╞форвард = 3#DEFINE йд╞довн╞форвард = 4#DEFINE йд╞довн = 5#DEFINE йд╞довн╞бацквард = 6#DEFINE йд╞бацквард = 7#DEFINE йд╞уп╞бацквард = 8#DECLARE JD(1,8) ' DIRECTIONAL JOYSTICK (PLAYER DIRECTION NEUTRAL)JD(0, й╞уп) = йд╞упJD(0, й╞уп╞ригхт) = йд╞уп╞форвардJD(0, й╞ригхт) = йд╞форвардJD(0, й╞довн╞ригхт) = йд╞довн╞форвардJD(0, й╞довн) = йд╞довнJD(0, й╞довн╞лефт) = йд╞довн╞бацквардJD(0, й╞лефт) = йд╞бацквардJD(0, й╞уп╞лефт) = йд╞уп╞бацквардJD(1, й╞уп) = йд╞упJD(1, й╞уп╞ригхт) = йд╞уп╞бацквардJD(1, й╞ригхт) = йд╞форвардJD(1, й╞довн╞ригхт) = йд╞довн╞бацквардJD(1, й╞довн) = йд╞довнJD(1, й╞довн╞лефт) = йд╞довн╞форвардJD(1, й╞лефт) = йд╞форвардJD(1, й╞уп╞лефт) = йд╞уп╞форвард.IMGS'----#DEFINE имг╞цлоудс = 0#DEFINE имг╞скы = 1#DEFINE имг╞лт╞моунт = 2#DEFINE имг╞дк╞моунт = 3#DEFINE имг╞ватер = 4#DEFINE имг╞хи╞гроунд = 5#DEFINE имг╞ло╞гроунд = 6#DEFINE имг╞сун = 7#DEFINE имг╞пвалк1 = 0#DEFINE имг╞пвалк2 = 1#DEFINE имг╞пвалк3 = 2#DEFINE имг╞ппунцх1 = 3#DEFINE имг╞ппунцх2 = 4#DEFINE имг╞ппунцх3 = 5#DEFINE имг╞пкицк1 = 6#DEFINE имг╞пкицк2 = 7#DEFINE имг╞пкицк3 = 8#DEFINE имг╞пкнеел1 = 9#DEFINE имг╞пкнеел2 = 10#DEFINE имг╞пкнеел3 = 11#DEFINE имг╞пкпунцх1 = 12#DEFINE имг╞пкпунцх2 = 13#DEFINE имг╞пкпунцх3 = 14#DEFINE имг╞пккицк1 = 15#DEFINE имг╞пккицк2 = 16#DEFINE имг╞пккицк3 = 17#DEFINE имг╞пдие1 = 18#DEFINE имг╞пдие2 = 19#DEFINE имг╞пдие3 = 20#DEFINE имг╞пдие4 = 21#DEFINE имг╞пдие5 = 22#DEFINE имг╞двалк1 = 0#DEFINE имг╞двалк2 = 1#DEFINE имг╞двалк3 = 2#DEFINE имг╞дяуацк1 = 3#DEFINE имг╞дяуацк2 = 4#DEFINE имг╞дяуацк3 = 5#DEFINE имг╞ддие1 = 6#DEFINE имг╞ддие2 = 7#DEFINE имг╞ддие3 = 8#DEFINE имг╞ддие4 = 9#DEFINE имг╞ддие5 = 10#DEFINE хигхест╞лаыер = 7#DECLARE FX, FY#DECLARE XOFFS(хигхест╞лаыер) ' OFFSET INTO CYCLING OF GRAPHIC#DECLARE DRAW╞ORDER(хигхест╞лаыер)DRAW╞ORDER(0) = имг╞скыDRAW╞ORDER(1) = имг╞сунDRAW╞ORDER(2) = имг╞цлоудсDRAW╞ORDER(3) = имг╞лт╞моунтDRAW╞ORDER(4) = имг╞дк╞моунтDRAW╞ORDER(5) = имг╞ватерDRAW╞ORDER(6) = имг╞хи╞гроундDRAW╞ORDER(7) = имг╞ло╞гроунд#DECLARE OFFS╞AMOUNT(хигхест╞лаыер)OFFS╞AMOUNT(0) = .7OFFS╞AMOUNT(1) = 0OFFS╞AMOUNT(2) = .1OFFS╞AMOUNT(3) = .5OFFS╞AMOUNT(4) = 1OFFS╞AMOUNT(5) = 1.5OFFS╞AMOUNT(6) = 2#DECLARE PALIDX, PTR.ANIMS'-----#DEFINE аним╞пвалк = 0#DEFINE аним╞ппунцх = 1#DEFINE аним╞пкицк = 2#DEFINE аним╞пкнеел╞дн = 3#DEFINE аним╞пкнеел╞уп = 4#DEFINE аним╞пкпунцх = 5#DEFINE аним╞пккицк = 6#DEFINE аним╞пдие = 7#DEFINE аним╞пйумп = 8#DEFINE аним╞двалк = 0#DEFINE аним╞дяуацк = 1#DEFINE аним╞ддие = 2#DEFINE аним╞маь = 10#DECLARE ANIM╞ORDER(форм╞маь, аним╞маь, 10)ANIM╞ORDER(форм╞хуман, аним╞пвалк, 0) = имг╞пвалк1ANIM╞ORDER(форм╞хуман, аним╞пвалк, 1) = имг╞пвалк2ANIM╞ORDER(форм╞хуман, аним╞пвалк, 2) = имг╞пвалк3ANIM╞ORDER(форм╞хуман, аним╞пвалк, 3) = имг╞пвалк2ANIM╞ORDER(форм╞хуман, аним╞ппунцх, 0) = имг╞ппунцх1ANIM╞ORDER(форм╞хуман, аним╞ппунцх, 1) = имг╞ппунцх2ANIM╞ORDER(форм╞хуман, аним╞ппунцх, 2) = имг╞ппунцх3ANIM╞ORDER(форм╞хуман, аним╞ппунцх, 3) = имг╞ппунцх2ANIM╞ORDER(форм╞хуман, аним╞ппунцх, 4) = имг╞ппунцх1ANIM╞ORDER(форм╞хуман, аним╞пкицк, 0) = имг╞пкицк1ANIM╞ORDER(форм╞хуман, аним╞пкицк, 1) = имг╞пкицк2ANIM╞ORDER(форм╞хуман, аним╞пкицк, 2) = имг╞пкицк3ANIM╞ORDER(форм╞хуман, аним╞пкицк, 3) = имг╞пкицк2ANIM╞ORDER(форм╞хуман, аним╞пкицк, 4) = имг╞пкицк1ANIM╞ORDER(форм╞хуман, аним╞пкнеел╞дн, 0) = имг╞пкнеел1ANIM╞ORDER(форм╞хуман, аним╞пкнеел╞дн, 1) = имг╞пкнеел2ANIM╞ORDER(форм╞хуман, аним╞пкнеел╞дн, 2) = имг╞пкнеел3ANIM╞ORDER(форм╞хуман, аним╞пкнеел╞уп, 0) = имг╞пкнеел2ANIM╞ORDER(форм╞хуман, аним╞пкнеел╞уп, 1) = имг╞пкнеел1ANIM╞ORDER(форм╞хуман, аним╞пкпунцх, 0) = имг╞пкпунцх1ANIM╞ORDER(форм╞хуман, аним╞пкпунцх, 1) = имг╞пкпунцх2ANIM╞ORDER(форм╞хуман, аним╞пкпунцх, 2) = имг╞пкпунцх3ANIM╞ORDER(форм╞хуман, аним╞пкпунцх, 3) = имг╞пкпунцх2ANIM╞ORDER(форм╞хуман, аним╞пкпунцх, 4) = имг╞пкпунцх1ANIM╞ORDER(форм╞хуман, аним╞пккицк, 0) = имг╞пккицк1ANIM╞ORDER(форм╞хуман, аним╞пккицк, 1) = имг╞пккицк2ANIM╞ORDER(форм╞хуман, аним╞пккицк, 2) = имг╞пккицк3ANIM╞ORDER(форм╞хуман, аним╞пккицк, 3) = имг╞пккицк2ANIM╞ORDER(форм╞хуман, аним╞пккицк, 4) = имг╞пккицк1ANIM╞ORDER(форм╞хуман, аним╞пдие, 0) = имг╞пдие1ANIM╞ORDER(форм╞хуман, аним╞пдие, 1) = имг╞пдие2ANIM╞ORDER(форм╞хуман, аним╞пдие, 2) = имг╞пдие3ANIM╞ORDER(форм╞хуман, аним╞пдие, 3) = имг╞пдие4ANIM╞ORDER(форм╞хуман, аним╞пдие, 4) = имг╞пдие5ANIM╞ORDER(форм╞хуман, аним╞пдие, 5) = имг╞пдие5ANIM╞ORDER(форм╞хуман, аним╞пдие, 6) = имг╞пдие5ANIM╞ORDER(форм╞хуман, аним╞пдие, 7) = имг╞пдие5ANIM╞ORDER(форм╞хуман, аним╞пдие, 8) = имг╞пдие5ANIM╞ORDER(форм╞хуман, аним╞пйумп, 0) = имг╞пкнеел1ANIM╞ORDER(форм╞хуман, аним╞пйумп, 1) = имг╞пкнеел2ANIM╞ORDER(форм╞дуцк, аним╞двалк, 0) = имг╞двалк1ANIM╞ORDER(форм╞дуцк, аним╞двалк, 1) = имг╞двалк2ANIM╞ORDER(форм╞дуцк, аним╞двалк, 2) = имг╞двалк3ANIM╞ORDER(форм╞дуцк, аним╞двалк, 3) = имг╞двалк2ANIM╞ORDER(форм╞дуцк, аним╞дяуацк, 0) = имг╞дяуацк1ANIM╞ORDER(форм╞дуцк, аним╞дяуацк, 1) = имг╞дяуацк2ANIM╞ORDER(форм╞дуцк, аним╞дяуацк, 2) = имг╞дяуацк3ANIM╞ORDER(форм╞дуцк, аним╞дяуацк, 3) = имг╞дяуацк2ANIM╞ORDER(форм╞дуцк, аним╞дяуацк, 4) = имг╞дяуацк1ANIM╞ORDER(форм╞дуцк, аним╞ддие, 0) = имг╞ддие1ANIM╞ORDER(форм╞дуцк, аним╞ддие, 1) = имг╞ддие2ANIM╞ORDER(форм╞дуцк, аним╞ддие, 2) = имг╞ддие3ANIM╞ORDER(форм╞дуцк, аним╞ддие, 3) = имг╞ддие4ANIM╞ORDER(форм╞дуцк, аним╞ддие, 4) = имг╞ддие5ANIM╞ORDER(форм╞дуцк, аним╞ддие, 5) = имг╞ддие5ANIM╞ORDER(форм╞дуцк, аним╞ддие, 6) = имг╞ддие5ANIM╞ORDER(форм╞дуцк, аним╞ддие, 7) = имг╞ддие5ANIM╞ORDER(форм╞дуцк, аним╞ддие, 8) = имг╞ддие5#DECLARE MAX╞FRAME(форм╞маь, аним╞маь)MAX╞FRAME(форм╞хуман, аним╞пвалк) = 4MAX╞FRAME(форм╞хуман, аним╞ппунцх) = 5MAX╞FRAME(форм╞хуман, аним╞пкицк) = 5MAX╞FRAME(форм╞хуман, аним╞пкнеел╞дн) = 3MAX╞FRAME(форм╞хуман, аним╞пкнеел╞уп) = 2MAX╞FRAME(форм╞хуман, аним╞пкпунцх) = 5MAX╞FRAME(форм╞хуман, аним╞пккицк) = 5MAX╞FRAME(форм╞хуман, аним╞пдие) = 9MAX╞FRAME(форм╞хуман, аним╞пйумп) = 2MAX╞FRAME(форм╞дуцк, аним╞двалк) = 4MAX╞FRAME(форм╞дуцк, аним╞дяуацк) = 5MAX╞FRAME(форм╞дуцк, аним╞ддие) = 9.FANIM#DECLARE PLAYER╞FORM = 1 ' хуман#DECLARE BADDIE╞FORM = 1#DEFINE фаним╞валк = 0#DEFINE фаним╞пунцх = 1#DEFINE фаним╞кицк = 2#DEFINE фаним╞кнеел╞дн = 3#DEFINE фаним╞кнеел╞уп = 4#DEFINE фаним╞кпунцх = 5#DEFINE фаним╞ккицк = 6#DEFINE фаним╞дие = 7#DEFINE фаним╞йумп = 8#DEFINE фаним╞маь = 9#DECLARE FORM╞ANIM(форм╞маь, фаним╞маь)FORM╞ANIM(форм╞хуман, фаним╞валк) = аним╞пвалкFORM╞ANIM(форм╞хуман, фаним╞пунцх) = аним╞ппунцхFORM╞ANIM(форм╞хуман, фаним╞кицк) = аним╞пкицкFORM╞ANIM(форм╞хуман, фаним╞кнеел╞дн) = аним╞пкнеел╞днFORM╞ANIM(форм╞хуман, фаним╞кнеел╞уп) = аним╞пкнеел╞упFORM╞ANIM(форм╞хуман, фаним╞кпунцх) = аним╞пкпунцхFORM╞ANIM(форм╞хуман, фаним╞ккицк) = аним╞пккицкFORM╞ANIM(форм╞хуман, фаним╞дие) = аним╞пдиеFORM╞ANIM(форм╞хуман, фаним╞йумп) = аним╞пйумпFORM╞ANIM(форм╞дуцк, фаним╞валк) = аним╞двалкFORM╞ANIM(форм╞дуцк, фаним╞пунцх) = аним╞дяуацкFORM╞ANIM(форм╞дуцк, фаним╞кицк) = аним╞дяуацкFORM╞ANIM(форм╞дуцк, фаним╞дие) = аним╞ддие#DECLARE PLAYER╞FRAME = 0#DECLARE PLAYER╞ANIM = 0 ' аним╞пвалк#DECLARE BADDIE╞FRAME = 0#DECLARE BADDIE╞ANIM = 0 ' аним╞пвалк.OFFSETS#DEFINE оффсет╞дата╞сизе  = 0#DEFINE оффсет╞нум╞фрамес = 2#DEFINE оффсет╞фраме0     = 3#DEFINE фрм╞оффсет╞ь          = 0#DEFINE фрм╞оффсет╞ы          = 1#DEFINE фрм╞оффсет╞в          = 2#DEFINE фрм╞оффсет╞х          = 3#DEFINE фрм╞оффсет╞хитбоьес   = 4#DEFINE фрм╞оффсет╞хб╞хеад    = 4#DEFINE фрм╞оффсет╞хб╞торсо   = 8#DEFINE фрм╞оффсет╞хб╞феет    = 12#DEFINE фрм╞оффсет╞хб╞аттацк  = 16#DEFINE фрм╞оффсет╞дата       = 20#DECLARE BX╞OFFS(3)BX╞OFFS(0) = фрм╞оффсет╞хб╞хеадBX╞OFFS(1) = фрм╞оффсет╞хб╞торсоBX╞OFFS(2) = фрм╞оффсет╞хб╞феетBX╞OFFS(3) = фрм╞оффсет╞хб╞аттацк.MUSIC╞VARS'----------#DEFINE CHUNK╞MAX = 50#DECLARE CHUNK╞CNT, CHUNK╞IDX, VIDX, TMPO%, ROW#DECLARE ECHO╞M, ECHO╞B, ECHO╞SZ = .05, CHUNK╞RPT, ECHO╞DELAY#DECLARE V$(5,CHUNK╞MAX), V#DECLARE SONG$#DECLARE V1$, V2$, V3$, V4$, V5$, V6$#DECLARE CURR╞FREQ, CURR╞DIR#STRUCT енжтыпе NAME$, ATTACK, DECAY, SUSTAIN, RELEASE, WAVEFORM, PWенжтыпе ENVS(9) = [ _  [ "пIANO",       0,  9,  0,  0,  2, 1536 ], _  [ "аCCORDION",  12,  0, 12,  0,  1,    0 ], _  [ "цALLIOPE",    0,  0, 15,  0,  0,    0 ], _  [ "дRUM",        0,  5,  5,  0,  3,    0 ], _  [ "фLUTE",       9,  4,  4,  0,  0,    0 ], _  [ "гUITAR",      0,  9,  2,  1,  1,    0 ], _  [ "хARPSICRD",   0,  9,  0,  0,  2,  512 ], _  [ "оRGAN",       0,  9,  9,  0,  2, 2048 ], _  [ "тRUMPET",     8,  9,  4,  1,  2,  512 ], _  [ "ьYLOPHONE",   0,  9,  0,  0,  0,    0 ]  _]#DEFINE дир╞ноне = 0#DEFINE дир╞уп   = 1#DEFINE дир╞довн = 2#DEFINE дир╞осц  = 3#DEFINE ф╞офф = 0#DEFINE ф╞он  = 1#DECLARE FSROW = 0, FSEL = -1#STRUCT филттыпе NAME$, FREQ, LP, BP, HP, RES, DIR, MIN, SWEEPфилттыпе FILT(10) = [ _  [ "LOWP╞UP",    1000, ф╞он,  ф╞офф, ф╞офф, 15, дир╞уп,   100, 10 ], _  [ "LOWP╞DOWN",  1000, ф╞он,  ф╞офф, ф╞офф, 15, дир╞довн, 100, 10 ], _  [ "LOWP╞OSC",   1000, ф╞он,  ф╞офф, ф╞офф, 15, дир╞осц,  100, 10 ], __  [ "BANDP╞UP",   1000, ф╞офф, ф╞он,  ф╞офф, 15, дир╞уп,   100, 10 ], _  [ "BANDP╞DOWN", 1000, ф╞офф, ф╞он,  ф╞офф, 15, дир╞довн, 100, 10 ], _  [ "BANDP╞OSC",  1000, ф╞офф, ф╞он,  ф╞офф, 15, дир╞осц,  100, 10 ], __  [ "HIGHP╞UP",   1000, ф╞офф, ф╞офф, ф╞он,  15, дир╞уп,   100, 10 ], _  [ "HIGHP╞DOWN", 1000, ф╞офф, ф╞офф, ф╞он,  15, дир╞довн, 100, 10 ], _  [ "HIGHP╞OSC",  1000, ф╞офф, ф╞офф, ф╞он,  15, дир╞осц,  100, 10 ], __  [ "SPARE╞1",    0,    ф╞офф, ф╞офф, ф╞офф, 0,  дир╞ноне, 0,   0  ], _  [ "SPARE╞2",    0,    ф╞офф, ф╞офф, ф╞офф, 0,  дир╞ноне, 0,   0  ], __]#DECLARE SEQCNT#DECLARE SEQ╞CHUNK(200), SEQ╞EXTRA(200)#DECLARE PLYPTR, PLYFLAG#DEFINE цмд╞темпо = -1#DEFINE цмд╞филтер = -2#DEFINE цмд╞лооп = -3#DEFINE цмд╞ецхо╞м1 = -4   ' ECHO MELODY: VOICE 1 ON VOICE 4#DEFINE цмд╞ецхо╞м2 = -5   ' ECHO MELODY: VOICE 1 ON VOICE 2 + 4 + 5#DEFINE цмд╞ецхо╞б  = -6   ' ECHO BASS:   VOICE 3 ON VOICE 6#DEFINE цмд╞ецхо╞офф = -7#DEFINE цмд╞ецхо╞сз = -8#DEFINE цмд╞жол = -9#DEFINE цмд╞делаы = -10#DEFINE цмд╞маь = 11#DECLARE PJUMP, PJDIR, BJUMP, BJDIR#DEFINE бс╞офф = 0#DEFINE бс╞спавн = 1#DEFINE бс╞алиже = 2#DEFINE бс╞деад = 3#DECLARE NEXT╞BADDIE╞TIME = 50, BADDIE╞DEAD╞TIME = 50, BADDIE╞STATE#DECLARE BADDIE╞VISIBLE'----.MAIN'----PRINT CHR$(27)+"5"PRINT CHR$(147);BORDER 0BACKGROUND 0GOSUB LOAD╞DATAPALIDX = 0GOSUB SET╞PALETTESONG$ = "CHABI.P"GOSUB LOAD╞SONG.LOOP0  GOSUB INIT╞VARS  GOSUB SHOW╞TITLE  GOSUB GAMEPLAY  ' GOSUB GAMEOVER  GOTO LOOP0'---------------.TRANSPARENT╞DMA'---------------  WPOKE $40009, SRC╞ADDR  WPOKE $4000C, DEST╞ADDR  WPOKE $40007, LENGTH  POKE  $40004, TRANSP  POKE $D702, 4 ' DMA LIST IN BANK 4  POKE $D701, $00 ' DMA LIST MSB  POKE $D705, $00 ' DMA LIST LSB  RETURN'----------.SHOW╞TITLE'----------  PRINT CHR$(147);  PRINT CHR$(14);  ' LOWER-CASE  PRINT "вAY OF THE иMPLODING фOOT"  PRINT "========================="  PRINT "а GAME MADE BY THE мега65 COMMUNITY!"  GET KEY A$  A$=""  ' ALL REVERSE-CHAR SPACES FOR MOST OF SCREEN  EDMA 3, $F00, 160, $40800  PRINT CHR$(142);  ' UPPERCASE  RETURN'---------.LOAD╞DATA'---------  PTR = $42000    FORM = форм╞лаыер  DAT╞IDX = дат╞лаыер  BLOAD "LEVEL1-BG.DAT",P(PTR)  GOSUB INIT╞PETSCII╞FRAMES  GOSUB PREPARE╞DOUBLE╞COPY╞LAYER  GOSUB ╞INCREMENT╞PTR╞TO╞NEXT╞FREE  FORM = форм╞хуман  DAT╞IDX = дат╞плаыер1  BLOAD "PLAYER.DAT",P(PTR)  GOSUB INIT╞PETSCII╞FRAMES  GOSUB ╞INCREMENT╞PTR╞TO╞NEXT╞FREE  FORM = форм╞хуман  DAT╞IDX = дат╞плаыер2  BLOAD "PLAYER2.DAT",P(PTR)  GOSUB INIT╞PETSCII╞FRAMES  GOSUB ╞INCREMENT╞PTR╞TO╞NEXT╞FREE  FORM = форм╞хуман  DAT╞IDX = дат╞плаыер3  BLOAD "PLAYER3.DAT",P(PTR)  GOSUB INIT╞PETSCII╞FRAMES  GOSUB ╞INCREMENT╞PTR╞TO╞NEXT╞FREE  FORM = форм╞хуман  DAT╞IDX = дат╞плаыер4  BLOAD "PLAYER4.DAT",P(PTR)  GOSUB INIT╞PETSCII╞FRAMES  GOSUB ╞INCREMENT╞PTR╞TO╞NEXT╞FREE  FORM = форм╞дуцк  DAT╞IDX = дат╞дуцк  BLOAD "DUCK.DAT",P(PTR)  GOSUB INIT╞PETSCII╞FRAMES  GOSUB ╞INCREMENT╞PTR╞TO╞NEXT╞FREE  BLOAD "PAL.BIN",P($40100),R  RETURN'---------------------------.╞INCREMENT╞PTR╞TO╞NEXT╞FREE'---------------------------  PTR = TMP  SZ = WPEEK(PTR + оффсет╞дата╞сизе)  'PRINT  'PRINT "INC SZ = ";SZ  'PRINT "PTR = ";HEX$(PTR + оффсет╞дата╞сизе)  PTR = PTR + SZ  'GET KEY A$  RETURN'-----------.SET╞PALETTE'----------- (PALIDX)  PTR = $40100 + PALIDX * 16 * 3  FOR K = 0 TO 15    ' RED    POKE $D100 + K + 16, PEEK(PTR)    PTR = PTR + 1    ' GREEN    POKE $D200 + K + 16, PEEK(PTR)    PTR = PTR + 1    ' BLUE    POKE $D300 + K + 16, PEEK(PTR)    PTR = PTR + 1  NEXT K  RETURN'---------.INIT╞VARS'---------  ' CLEAR DMA LIST AREA  FOR K = 0 TO 20    POKE $40000+K, 0  NEXT K  POKE $40000, $81 ' OPT = DEST ADDR мб SELECTOR  POKE $40001, $00 ' DEFAULT TO 1ST MEGABYTE  POKE $40002, $07 ' OPT = ENABLE TRANSPARENCY  POKE $40003, $86 ' OPT = SET TRANSPARENCY  POKE $40004, $20 ' TRANSPARENCY VALUE  POKE $40005, $00 ' END OF OPTIONS  POKE $40006, $00 ' цмд LSB = цопы  WPOKE $40007, $0000 ' LENGTH  WPOKE $40009, $1000 ' SOURCE ADDR  POKE $4000B, $05    ' SOURCE BANK  WPOKE $4000C, $1000 ' DEST ADDR  POKE $4000E, $05    ' DEST BANK  POKE $4000F, $00    ' цмд MSB (IGNORE)  WPOKE $40010, $0000 ' MODULO (IGNORE)  ' CLEAR THE OFFSCREEN BUFFER  EDMA 3, $F00, 160, $50000  EDMA 3, $A0, $20, $50F00  EDMA 3, $FA0, $4F, $51000  KNEEL╞FLAG = 0  PLAYER╞FORM = форм╞хуман  PLAYER╞DAT╞FIXED = дат╞плаыер4  PLAYER╞DAT╞IDX = PLAYER╞DAT╞FIXED  BADDIE╞KNEEL╞FLAG = 0  BADDIE╞FORM = форм╞хуман  BADDIE╞DAT╞FIXED = дат╞плаыер2  BADDIE╞DAT╞IDX = BADDIE╞DAT╞FIXED  PLAYER╞FRAME = 0  PLAYER╞ANIM = FORM╞ANIM(PLAYER╞FORM, фаним╞валк)  PX = 0 : PY = 23  BX = 60 : BY = 23  PLAYER╞ENERGY = 18  LAG╞PENERGY = 0  BADDIE╞ENERGY = 0  LAG╞BENERGY = 0  PJUMP = 0  PJDIR = 0  BJDIR = 0  PLAYER╞MIRROR = 0  BADDIE╞MIRROR = 1  BJUMP = 0  NEXT╞BADDIE╞TIME = 50  BADDIE╞DEAD╞TIME = 50  BADDIE╞STATE = бс╞офф  RETURN'-------------------.INIT╞PETSCII╞FRAMES'-------------------  TMP = PTR  MAX╞FRAMES(FORM) = PEEK(PTR + оффсет╞нум╞фрамес)  'PRINT  'PRINT "PTR=";HEX$(PTR + оффсет╞нум╞фрамес)  PTR = PTR + оффсет╞фраме0  'PRINT  'PRINT "FORM=";FORM;" - MX╞FRM=";MAX╞FRAMES(FORM);": ";  FRM╞IDX = 0  DO WHILE FRM╞IDX < MAX╞FRAMES(FORM)    'PRINT FRM╞IDX;    FRAME╞ADDR(DAT╞IDX, FRM╞IDX) = PTR    FRMW = PEEK(PTR + фрм╞оффсет╞в)    FRMH = PEEK(PTR + фрм╞оффсет╞х)        'PRINT "PTR=";HEX$(PTR);", IDX=";FRM╞IDX;", W=";FRMW;", H=";FRMH    PTR = PTR + фрм╞оффсет╞дата + FRMW * FRMH    ':PRINT CHR$(147);"FRM╞IDX=";FRM╞IDX    FRM╞IDX = FRM╞IDX + 1  LOOP  PTR = TMP  RETURN'-------------------------.PREPARE╞DOUBLE╞COPY╞LAYER'-------------------------  DBLUP╞ADDR = $52000  FOR FRAMEIDX = 0 TO MAX╞FRAMES(форм╞лаыер)-1    PTR = FRAME╞ADDR(дат╞лаыер, FRAMEIDX)    FRMX = PEEK(PTR + фрм╞оффсет╞ь)    FRMY = PEEK(PTR + фрм╞оффсет╞ы)    FRMW = PEEK(PTR + фрм╞оффсет╞в)    FRMH = PEEK(PTR + фрм╞оффсет╞х)    FRMX1=FRMX+FRMW-1    FRMY1=FRMY+FRMH-1    FRAME╞DBLUP╞ADDR(FRAMEIDX) = DBLUP╞ADDR    ' цопы цолор FOR EACH ROW TWICE INTO SOME LOCATION IN DBLUP╞ADDR    FOR Y = FRMY TO FRMY1      FOR K = 0 TO 1          ' COPY IT TO SOME PLACE IN $5.2000          EDMA 0, FRMW, (PTR + фрм╞оффсет╞дата), DBLUP╞ADDR          DBLUP╞ADDR = DBLUP╞ADDR + FRMW      NEXT K      PTR = PTR + FRMW    NEXT Y  NEXT FRAMEIDX  RETURN'---------------.DRAW╞BACKGROUND'---------------   '   FRAMEIDX = имг╞сун   '   GOSUB DRAW╞PETSCII╞LAYER    '   RETURN  POKE $4000B, $05  ' ASSURE SOURCE BANK 5 (FOR DOUBLED-UP LAYERS)  FOR LIDX = 0 TO MAX╞FRAMES(форм╞лаыер)-1     ' IF LAYER╞VISIBLE[LIDX] = 1 THEN BEGIN       FRAMEIDX = DRAW╞ORDER(LIDX)       GOSUB DRAW╞PETSCII╞LAYER      'BEND  NEXT LIDX  RETURN'----------.MOVE╞RIGHT'----------  BADDIE╞VISIBLE = BADDIE╞STATE = бс╞алиже OR BADDIE╞STATE = бс╞деад  IF PX < 25 OR (BADDIE╞STATE = бс╞алиже AND PX < 59) THEN BEGIN    PX = PX + 1  BEND:ELSE BEGIN    IF BX > 0 AND BADDIE╞VISIBLE THEN BEGIN      GOSUB INCR╞OFFS      BX = BX - 1    BEND    IF BADDIE╞STATE = бс╞офф THEN BEGIN      GOSUB INCR╞OFFS    BEND  BEND  IF BADDIE╞STATE <> бс╞алиже AND PX > 26 THEN BEGIN    IF MOD(PLAYER╞FRAME,2) = 0 THEN PX = PX - 1  BEND  KNEEL╞FLAG = 0  RETURN'---------.MOVE╞LEFT'---------  IF PX > 0 THEN BEGIN    PX = PX - 1  BEND:ELSE BEGIN    IF BX < 60 THEN BEGIN      GOSUB DECR╞OFFS      BX = BX + 1    BEND  BEND  KNEEL╞FLAG = 0  RETURN'--------------.GET╞USER╞INPUT'--------------  GOSUB KEYBOARD╞INPUT  GOSUB JOYSTICK╞INPUT  IF A$="X" THEN BEGIN    KNEEL╞FLAG = 0    PLAYER╞ANIM = FORM╞ANIM(PLAYER╞FORM, фаним╞дие)    PLAYER╞FRAME = 0  BEND  RETURN'--------------.KEYBOARD╞INPUT'--------------  GET A$  IF A$="," AND PALIDX>0 THEN PALIDX=PALIDX-1:GOSUB SET╞PALETTE  IF A$="." AND PALIDX<11 THEN PALIDX=PALIDX+1:GOSUB SET╞PALETTE  IF A$="1" THEN BEGIN    дебуг=MOD(дебуг+1,2)    EDMA 3, $F00, 160, $50000    EDMA 3, $F00, 160, $40800  BEND  ' D = TOGGLE BETWEEN HUMAN AND DUCK  IF A$="D" THEN BEGIN    IF PLAYER╞FORM = форм╞хуман THEN BEGIN      PLAYER╞FORM = форм╞дуцк      PLAYER╞DAT╞IDX = дат╞дуцк    BEND:ELSE BEGIN      PLAYER╞FORM = форм╞хуман      PLAYER╞DAT╞IDX = PLAYER╞DAT╞FIXED    BEND    PLAYER╞ANIM = FORM╞ANIM(PLAYER╞FORM, фаним╞валк)    PLAYER╞FRAME = 0    KNEEL╞FLAG = 0  BEND  IF A$="<" AND PLAYER╞DAT╞FIXED > дат╞плаыер1 THEN BEGIN    PLAYER╞DAT╞FIXED = PLAYER╞DAT╞FIXED - 1    PLAYER╞DAT╞IDX = PLAYER╞DAT╞FIXED  BEND  IF A$=">" AND PLAYER╞DAT╞FIXED < дат╞плаыер4 THEN BEGIN    PLAYER╞DAT╞FIXED = PLAYER╞DAT╞FIXED + 1    PLAYER╞DAT╞IDX = PLAYER╞DAT╞FIXED  BEND  RETURN'--------------.JOYSTICK╞INPUT'--------------  JDIR╞RAW = JOY(2)  JFIRE = JDIR╞RAW AND 128  JDIR = JDIR╞RAW AND $7F  IF JDIR > 8 THEN JDIR = 0  ' HIDE ANY NONSENSICALS  ' HANDLE NO JOYSTICK INPUT CASES  ' ------------------------------  IF JDIR╞RAW=0 AND PLAYER╞ANIM = аним╞пкнеел╞дн THEN BEGIN    IF PLAYER╞FRAME >= MAX╞FRAME(форм╞хуман, аним╞пкнеел╞дн)-1 THEN BEGIN    KNEEL╞FLAG = 0    PLAYER╞ANIM = аним╞пкнеел╞уп    PLAYER╞FRAME = 0    BEND  BEND  IF JDIR╞RAW = 0 THEN RETURN  ' HANDLE CASES WITH SOME JOYSTICK INPUT  ' -------------------------------------  ' NO FIRE BUTTON MOVES  ' --------------------  IF JFIRE=0 THEN BEGIN    IF JDIR=й╞ригхт AND PJUMP=0 THEN GOSUB MOVE╞RIGHT    IF JDIR=й╞лефт AND PJUMP=0 THEN GOSUB MOVE╞LEFT    IF JDIR=й╞довн AND PLAYER╞ANIM = аним╞пвалк THEN BEGIN      PLAYER╞ANIM = аним╞пкнеел╞дн      PLAYER╞FRAME = 0    BEND    IF (JDIR=й╞уп OR JDIR=й╞уп╞лефт OR JDIR=й╞уп╞ригхт) AND PJUMP=0 THEN BEGIN      PLAYER╞ANIM = аним╞пйумп      PJUMP = 1      IF JDIR=й╞уп THEN PJDIR = 0      IF JDIR=й╞уп╞лефт THEN PJDIR = -1      IF JDIR=й╞уп╞ригхт THEN PJDIR = 1      PLAYER╞FRAME = 0    BEND  BEND  ' FIRE BUTTON MOVES  ' -----------------  IF JFIRE = 128 AND PJUMP=0 THEN BEGIN    IF JD(PLAYER╞MIRROR, JDIR)=йд╞уп╞форвард AND PLAYER╞ANIM = FORM╞ANIM(PLAYER╞FORM, фаним╞валк) THEN BEGIN      PLAYER╞ANIM = FORM╞ANIM(PLAYER╞FORM, фаним╞пунцх)      SOUND 1 + PLAYER╞MIRROR * 3, 4000, 5, 1, 100, 1000, 3      IF KNEEL╞FLAG = 1 THEN PLAYER╞ANIM = аним╞пкпунцх      PLAYER╞FRAME = 0    BEND    IF JD(PLAYER╞MIRROR, JDIR)=йд╞довн╞форвард AND PLAYER╞ANIM = аним╞пвалк THEN BEGIN      PLAYER╞ANIM = аним╞пкицк      SOUND 1 + PLAYER╞MIRROR * 3, 2000, 5, 1, 100, 1000, 3      IF KNEEL╞FLAG = 1 THEN PLAYER╞ANIM = аним╞пккицк      PLAYER╞FRAME = 0    BEND  BEND  RETURN'-----------.DRAW╞PLAYER'-----------  CHARACTER = плаыер  FRAMEIDX = ANIM╞ORDER(PLAYER╞FORM, PLAYER╞ANIM, PLAYER╞FRAME)  FX=PX : FY=PY  MIRROR = PLAYER╞MIRROR  FORM = PLAYER╞FORM  DAT╞IDX = PLAYER╞DAT╞IDX  GOSUB DRAW╞PETSCII╞FRAME  RETURN'-----------.DRAW╞BADDIE'-----------  CHARACTER = баддие  FRAMEIDX = ANIM╞ORDER(BADDIE╞FORM, BADDIE╞ANIM, BADDIE╞FRAME)  FX=BX : FY=BY  MIRROR = BADDIE╞MIRROR  FORM = BADDIE╞FORM  DAT╞IDX = BADDIE╞DAT╞IDX  GOSUB DRAW╞PETSCII╞FRAME  RETURN'--------------------------.CONSIDER╞NEXT╞PLAYER╞FRAME'--------------------------  IF PLAYER╞ANIM = FORM╞ANIM(PLAYER╞FORM, фаним╞валк) AND (JDIR=й╞лефт OR JDIR=й╞ригхт) THEN BEGIN    PLAYER╞FRAME = PLAYER╞FRAME + 1  BEND  IF PLAYER╞ANIM <> FORM╞ANIM(PLAYER╞FORM, фаним╞валк) THEN BEGIN    PLAYER╞FRAME = PLAYER╞FRAME + 1  BEND  IF PLAYER╞ANIM = аним╞пкнеел╞дн AND JDIR=й╞довн THEN BEGIN    IF PLAYER╞FRAME >= MAX╞FRAME(форм╞хуман, фаним╞кнеел╞дн) THEN BEGIN      PLAYER╞FRAME = MAX╞FRAME(форм╞хуман, фаним╞кнеел╞дн) - 1      KNEEL╞FLAG = 1    BEND    RETURN  BEND  IF PLAYER╞ANIM = аним╞пйумп THEN BEGIN    IF PLAYER╞FRAME >= MAX╞FRAME(форм╞хуман, фаним╞йумп) THEN BEGIN      PLAYER╞FRAME = MAX╞FRAME(форм╞хуман, фаним╞йумп) - 1    BEND  BEND  IF PJUMP > 0 THEN BEGIN    IF PJDIR>0 THEN GOSUB MOVE╞RIGHT:GOSUB MOVE╞RIGHT    IF PJDIR<0 THEN GOSUB MOVE╞LEFT:GOSUB MOVE╞LEFT    IF PJUMP = 1 THEN BEGIN      PY = PY - 2      IF PY <= 0 THEN PJUMP = 2    BEND    IF PJUMP = 2 THEN BEGIN      PY = PY + 2      IF PY >= 23 THEN BEGIN        PY = 23        PJUMP = 0        PLAYER╞ANIM = FORM╞ANIM(PLAYER╞FORM, фаним╞валк)        PLAYER╞FRAME = 0      BEND    BEND  BEND  IF PLAYER╞FRAME >= MAX╞FRAME(PLAYER╞FORM, PLAYER╞ANIM) THEN BEGIN    IF PLAYER╞ANIM = аним╞пдие THEN BEGIN      IF PLAYER╞ENERGY > 0 THEN BEGIN        PLAYER╞ANIM = аним╞пкнеел╞уп        PLAYER╞FRAME = 0      BEND:ELSE BEGIN        PLAYER╞FRAME = MAX╞FRAME(PLAYER╞FORM, PLAYER╞ANIM) - 1      BEND      RETURN    BEND    IF KNEEL╞FLAG = 1 AND PLAYER╞ANIM <> аним╞пкнеел╞дн THEN BEGIN      PLAYER╞ANIM = аним╞пкнеел╞дн      PLAYER╞FRAME = MAX╞FRAME(форм╞хуман, аним╞пкнеел╞дн) - 1    BEND:ELSE BEGIN      PLAYER╞ANIM = FORM╞ANIM(PLAYER╞FORM, фаним╞валк)      PLAYER╞FRAME = 0    BEND  BEND  IF BADDIE╞STATE = бс╞алиже OR BADDIE╞STATE = бс╞деад THEN BEGIN    IF PX > (BX + 5) THEN PLAYER╞MIRROR = 1    IF BX > (PX + 5) THEN PLAYER╞MIRROR = 0  BEND:ELSE BEGIN    PLAYER╞MIRROR = 0  BEND  RETURN'--------------------------.CONSIDER╞NEXT╞BADDIE╞FRAME'--------------------------  IF BADDIE╞STATE = бс╞алиже THEN BEGIN    IF BX > (PX + 5) THEN BADDIE╞MIRROR = 1    IF PX > (BX + 5) THEN BADDIE╞MIRROR = 0  BEND  IF BADDIE╞ANIM <> аним╞пвалк THEN BEGIN    BADDIE╞FRAME = BADDIE╞FRAME + 1  BEND  IF BADDIE╞FRAME >= MAX╞FRAME(BADDIE╞FORM, BADDIE╞ANIM) THEN BEGIN    IF BADDIE╞ANIM = аним╞пдие THEN BEGIN      IF BADDIE╞ENERGY > 0 THEN BEGIN        BADDIE╞ANIM = аним╞пкнеел╞уп        BADDIE╞FRAME = 0      BEND:ELSE BEGIN        BADDIE╞FRAME = MAX╞FRAME(BADDIE╞FORM, BADDIE╞ANIM) - 1      BEND      RETURN    BEND    IF BADDIE╞KNEEL╞FLAG = 1 AND BADDIE╞ANIM <> аним╞пкнеел╞дн THEN BEGIN      BADDIE╞ANIM = аним╞пкнеел╞дн      BADDIE╞FRAME = MAX╞FRAME(форм╞хуман, аним╞пкнеел╞дн) - 1    BEND:ELSE BEGIN      BADDIE╞ANIM = FORM╞ANIM(BADDIE╞FORM, фаним╞валк)      BADDIE╞FRAME = 0    BEND    RETURN  BEND  IF BADDIE╞STATE <> бс╞алиже THEN RETURN  IF BADDIE╞ANIM = аним╞пдие THEN RETURN  GOSUB IF╞PLAYER╞FAR╞WALK╞CLOSER  IF RET% = 1 THEN RETURN  GOSUB IF╞PLAYER╞NEARER╞WALK╞CAUTIOUS  IF RET% = 1 THEN RETURN  GOSUB IF╞PLAYER╞HITTABLE╞TRY╞HITTING  IF RET% = 1 THEN RETURN  ' IF PLAYER IS TRYING TO HIT ME, CONSIDER FLEEING  RETURN'------------------------------.IF╞PLAYER╞HITTABLE╞TRY╞HITTING'------------------------------  RET% = 0  ' IF PLAYER IS WITHIN HITTING DISTANCE, CONSIDER HITTING  IF ABS(PX-BX) >= 8 AND BADDIE╞ANIM = аним╞пвалк THEN BEGIN    RET% = 1    K = INT(RND(1)*8)    IF K = 1 THEN BEGIN      BADDIE╞ANIM = аним╞ппунцх      BADDIE╞FRAME=0      SOUND 1 + BADDIE╞MIRROR * 3, 4000, 5, 1, 100, 1000, 3    BEND    IF K = 2 THEN BEGIN      BADDIE╞ANIM = аним╞пкицк      BADDIE╞FRAME=0      SOUND 1 + BADDIE╞MIRROR * 3, 2000, 5, 1, 100, 1000, 3    BEND  BEND  RETURN'------------------------------.IF╞PLAYER╞NEARER╞WALK╞CAUTIOUS'------------------------------  RET% = 0  ' IF PLAYER IS NEARER, WALK AHEAD MORE CAUTIOUSLY  IF ABS(PX-BX) > 8 THEN BEGIN    IF INT(RND(1)*4) >= 3 THEN GOSUB MOVE╞BADDIE╞CLOSER    RET% = 1  BEND  RETURN'-------------------------.IF╞PLAYER╞FAR╞WALK╞CLOSER'-------------------------  RET% = 0  ' IF PLAYER IS A LONG DISTANCE AWAY, COMMIT TO WALKING CLOSER  IF ABS(PX-BX) > 20 THEN BEGIN    GOSUB MOVE╞BADDIE╞CLOSER    RET% = 1  BEND  RETURN'------------------.MOVE╞BADDIE╞CLOSER'------------------  BADDIE╞ANIM = аним╞пвалк  BADDIE╞FRAME = BADDIE╞FRAME + 1  IF BADDIE╞FRAME >= MAX╞FRAME(BADDIE╞FORM, BADDIE╞ANIM) THEN BADDIE╞FRAME = 0  IF BX > PX THEN BEGIN    BX = BX - 1  BEND:ELSE BEGIN    BX = BX + 1  BEND  RETURN'------------------.DRAW╞PETSCII╞FRAME'------------------  POKE $4000B, $04  ' ASSURE SOURCE BANK 4 (FOR ORIGINAL FRAME DATA)  IF MIRROR = 1 THEN SETBIT $40006, 5:ELSE CLRBIT $40006, 5  DATA╞ADDR = FRAME╞ADDR(DAT╞IDX, FRAMEIDX)  FRMX = PEEK(DATA╞ADDR + фрм╞оффсет╞ь)  FRMY = PEEK(DATA╞ADDR + фрм╞оффсет╞ы)  FRMW = PEEK(DATA╞ADDR + фрм╞оффсет╞в)  FRMH = PEEK(DATA╞ADDR + фрм╞оффсет╞х)  FRMX = FX ' OVERRIDE POSITION  FRMY = FY  FRMX1=FRMX+FRMW-1  FRMY1=FRMY+FRMH-1  CLRADDR = $51000 + FRMX + FRMY * 80  IF MIRROR = 1 THEN CLRADDR = CLRADDR + FRMW - 1  CDATA╞ADDR = DATA╞ADDR + фрм╞оффсет╞дата  FOR YY=FRMY TO FRMY1    ' DRAW CHARS    ' ----------    SRC╞ADDR = CDATA╞ADDR    DEST╞ADDR = CLRADDR    LENGTH = FRMW    TRANSP = $FF    GOSUB TRANSPARENT╞DMA    CDATA╞ADDR = CDATA╞ADDR + FRMW    CLRADDR = CLRADDR + 80    NEXT YY  IF дебуг THEN GOSUB DRAW╞BOXES  GOSUB CHECK╞IF╞HIT╞OPPONENT  RETURN'------------------.DRAW╞PETSCII╞LAYER'------------------  CLRBIT $40006, 5  DATA╞ADDR = FRAME╞ADDR(дат╞лаыер, FRAMEIDX)  FRMX = PEEK(DATA╞ADDR + фрм╞оффсет╞ь)  FRMY = PEEK(DATA╞ADDR + фрм╞оффсет╞ы)  FRMW = PEEK(DATA╞ADDR + фрм╞оффсет╞в)  FRMH = PEEK(DATA╞ADDR + фрм╞оффсет╞х)  FRMX1=FRMX+FRMW-1  FRMY1=FRMY+FRMH-1  CLRADDR = $51000 + FRMX + FRMY * 80  CDATA╞ADDR = DATA╞ADDR + фрм╞оффсет╞дата + FRMW * FRMH  XOFFS(FRAMEIDX) = MOD(XOFFS(FRAMEIDX) + 80, 80)  XOFFS = INT(XOFFS(FRAMEIDX))  CDATA╞ADDR = FRAME╞DBLUP╞ADDR(FRAMEIDX)  FOR YY=FRMY TO FRMY1    ' DRAW CHARS FROM OFFSET TO END    ' -----------------------------    SRC╞ADDR = CDATA╞ADDR + XOFFS    DEST╞ADDR = CLRADDR    LENGTH = FRMW    TRANSP = $FF    GOSUB TRANSPARENT╞DMA    CDATA╞ADDR = CDATA╞ADDR + FRMW * 2    CLRADDR = CLRADDR + 80    NEXT YY  RETURN'--------.GAMEPLAY'--------  GOSUB GET╞USER╞INPUT  GOSUB DRAW╞BACKGROUND  GOSUB DRAW╞SPRITES  GOSUB PAGE╞FLIP  GOSUB GAME╞LOGIC  GOSUB DRAW╞ENERGY╞BARS  RET% = 0  DO WHILE RET% = 0    GOSUB PARSE╞CURRENT╞SEQPTR  LOOP  GOTO GAMEPLAY  RETURN'----------------.DRAW╞ENERGY╞BARS'----------------  IF PLAYER╞ENERGY <> LAG╞PENERGY THEN BEGIN    IF LAG╞PENERGY < PLAYER╞ENERGY THEN BEGIN      LAG╞PENERGY = LAG╞PENERGY + 1      K = LAG╞PENERGY      GOSUB DRAW╞BLUE╞TRIANGLE      RETURN    BEND    IF LAG╞PENERGY > PLAYER╞ENERGY THEN BEGIN      K = LAG╞PENERGY      GOSUB CLEAR╞BLUE╞TRIANGLE      LAG╞PENERGY = LAG╞PENERGY - 1      RETURN    BEND  BEND  IF BADDIE╞ENERGY <> LAG╞BENERGY THEN BEGIN    IF LAG╞BENERGY < BADDIE╞ENERGY THEN BEGIN      LAG╞BENERGY = LAG╞BENERGY + 1      K = LAG╞BENERGY      GOSUB DRAW╞RED╞TRIANGLE      RETURN    BEND    IF LAG╞BENERGY > BADDIE╞ENERGY THEN BEGIN      K = LAG╞BENERGY      GOSUB CLEAR╞RED╞TRIANGLE      LAG╞BENERGY = LAG╞BENERGY - 1      RETURN    BEND  BEND  RETURN'------------------.DRAW╞BLUE╞TRIANGLE'------------------  CURSOR 1 + K * 2, 48:PRINT " ъ";  CURSOR 1 + K * 2, 49:PRINT "▓╘";  RETURN'-------------------.CLEAR╞BLUE╞TRIANGLE'-------------------  CURSOR 1 + K * 2, 48:PRINT "▓ ";  CURSOR 1 + K * 2, 49:PRINT "▓ ";  RETURN'-----------------.DRAW╞RED╞TRIANGLE'-----------------  CURSOR 78 - K * 2, 48:PRINT "√╘";  CURSOR 78 - K * 2, 49:PRINT "▓ъ";  RETURN'------------------.CLEAR╞RED╞TRIANGLE'------------------  CURSOR 78 - K * 2, 48:PRINT "▓ ";  CURSOR 78 - K * 2, 49:PRINT "▓ ";  RETURN'------------.DRAW╞SPRITES'------------  IF BADDIE╞STATE = бс╞алиже OR BADDIE╞STATE = бс╞деад THEN BEGIN    GOSUB DRAW╞BADDIE  BEND  GOSUB DRAW╞PLAYER  RETURN'----------.GAME╞LOGIC'----------  GOSUB CONSIDER╞NEXT╞PLAYER╞FRAME  GOSUB ASSESS╞BADDIE╞STATE  RETURN'-------------------.ASSESS╞BADDIE╞STATE'-------------------  IF BADDIE╞STATE = бс╞офф THEN BEGIN    ' CONSIDER WHEN TO SPAWN NEXT BADDIE    NEXT╞BADDIE╞TIME = NEXT╞BADDIE╞TIME - 1    IF NEXT╞BADDIE╞TIME = 0 THEN BADDIE╞STATE = бс╞спавн    RETURN  BEND  IF BADDIE╞STATE = бс╞спавн THEN BEGIN    BADDIE╞FORM = форм╞хуман    IF BADDIE╞DAT╞FIXED = дат╞плаыер2 THEN BEGIN      BADDIE╞DAT╞FIXED = дат╞плаыер3    BEND: ELSE BEGIN      BADDIE╞DAT╞FIXED = дат╞плаыер2    BEND    BADDIE╞DAT╞IDX = BADDIE╞DAT╞FIXED    BADDIE╞STATE = бс╞алиже    BX = 60 : BY = 23    BADDIE╞ANIM = FORM╞ANIM(BADDIE╞FORM, фаним╞валк)    BADDIE╞FRAME = 0    BADDIE╞ENERGY = 18    LAG╞BENERGY = 0    BADDIE╞MIRROR = 1    BJUMP = 0    RETURN  BEND  IF BADDIE╞STATE = бс╞алиже THEN BEGIN    GOSUB CONSIDER╞NEXT╞BADDIE╞FRAME    IF BADDIE╞ENERGY = 0 THEN BADDIE╞STATE = бс╞деад: BADDIE╞DEAD╞TIME=50    RETURN  BEND  IF BADDIE╞STATE = бс╞деад THEN BEGIN    GOSUB CONSIDER╞NEXT╞BADDIE╞FRAME    PLAYER╞MIRROR = 0    BADDIE╞DEAD╞TIME = BADDIE╞DEAD╞TIME - 1    IF BADDIE╞DEAD╞TIME = 0 THEN BADDIE╞STATE = бс╞офф:NEXT╞BADDIE╞TIME=50    RETURN  BEND  RETURN'---------.PAGE╞FLIP'---------  IF дебуг THEN BEGIN    EDMA 0, $F00, $50000, $40800    EDMA 3, $F00, 160, $50000  BEND  EDMA 0, $F00, $51000, $FF80000  ' FILL THE TOP PART  EDMA 3, $F00, $4F, $51000  RETURN'---------.INCR╞OFFS'---------  FOR K = 0 TO хигхест╞лаыер    XOFFS(K) = XOFFS(K) + OFFS╞AMOUNT(K)  NEXT K  RETURN'---------.DECR╞OFFS'---------  FOR K = 0 TO хигхест╞лаыер    XOFFS(K) = XOFFS(K) - OFFS╞AMOUNT(K)  NEXT K  RETURN'----------.DRAW╞BOXES'----------  PTR = DATA╞ADDR + фрм╞оффсет╞хитбоьес  FOR IDX = 0 TO 3    X1 = PEEK(PTR + 0)    Y1 = PEEK(PTR + 1)    X2 = PEEK(PTR + 2)    Y2 = PEEK(PTR + 3)    IF NOT (X1=0 AND Y1=0 AND X2=0 AND Y2=0) THEN BEGIN      GOSUB ADJUST╞COORDS      DRAW╞COLOR = 7      IF IDX = 3 THEN BEGIN        DRAW╞COLOR = 2        GOSUB DRAW╞BOX        ' GOSUB CHECK╞IF╞HIT╞OPPONENT      BEND:ELSE BEGIN        GOSUB DRAW╞BOX      BEND    BEND    PTR = PTR + 4  NEXT IDX  RETURN'--------.DRAW╞BOX'--------  ' DRAW CORNERS  ' ------------  X = X1 : Y = Y1 : K = цхар╞боь╞тл : GOSUB DRAW╞CHAR  X = X2 : Y = Y1 : K = цхар╞боь╞тр : GOSUB DRAW╞CHAR  X = X1 : Y = Y2 : K = цхар╞боь╞бл : GOSUB DRAW╞CHAR  X = X2 : Y = Y2 : K = цхар╞боь╞бр : GOSUB DRAW╞CHAR  ' DRAW HORIZONTALS  ' ----------------  FOR X = X1+1 TO X2-1    Y = Y1 : K = цхар╞хорз : GOSUB DRAW╞CHAR    Y = Y2 : K = цхар╞хорз : GOSUB DRAW╞CHAR  NEXT X  ' DRAW VERTICALS  ' --------------  FOR Y = Y1+1 TO Y2-1    X = X1 : K = цхар╞жерт : GOSUB DRAW╞CHAR    X = X2 : K = цхар╞жерт : GOSUB DRAW╞CHAR  NEXT Y  RETURN'---------.DRAW╞CHAR'---------  IF PEEK($50000 + X + Y * 80) <> цхар╞спаце THEN BEGIN    K = K + 128  BEND:ELSE BEGIN    POKE $51000 + X + Y * 80, 1  BEND  IF DRAW╞COLOR = 2 THEN POKE $51000 + X + Y * 80, DRAW╞COLOR  POKE $50000 + X + Y * 80, K  RETURN'---------------------.CHECK╞IF╞HIT╞OPPONENT'---------------------  DATA╞ADDR = FRAME╞ADDR(DAT╞IDX, FRAMEIDX)  TMP╞MIRROR = MIRROR  IF CHARACTER = плаыер THEN BEGIN    FRAMEIDX = ANIM╞ORDER(BADDIE╞FORM, BADDIE╞ANIM, BADDIE╞FRAME)    OPPONENT╞DATA╞ADDR = FRAME╞ADDR(BADDIE╞DAT╞IDX, FRAMEIDX)    OPPONENT╞MIRROR = BADDIE╞MIRROR    FX=BX : FY=BY  BEND  IF CHARACTER = баддие THEN BEGIN    FRAMEIDX = ANIM╞ORDER(PLAYER╞FORM, PLAYER╞ANIM, PLAYER╞FRAME)    OPPONENT╞DATA╞ADDR = FRAME╞ADDR(PLAYER╞DAT╞IDX, FRAMEIDX)    OPPONENT╞MIRROR = PLAYER╞MIRROR    FX=PX : FY=PY  BEND  X1 = PEEK(DATA╞ADDR + фрм╞оффсет╞хб╞аттацк + 0)  Y1 = PEEK(DATA╞ADDR + фрм╞оффсет╞хб╞аттацк + 1)  X2 = PEEK(DATA╞ADDR + фрм╞оффсет╞хб╞аттацк + 2)  Y2 = PEEK(DATA╞ADDR + фрм╞оффсет╞хб╞аттацк + 3)  IF X1=0 AND Y1=0 AND X2=0 AND Y2=0 THEN RETURN  GOSUB ADJUST╞COORDS  P╞X1 = X1  P╞Y1 = Y1  P╞X2 = X2  P╞Y2 = Y2  FRMX = PEEK(OPPONENT╞DATA╞ADDR + фрм╞оффсет╞ь)  FRMY = PEEK(OPPONENT╞DATA╞ADDR + фрм╞оффсет╞ы)  FRMX = FRMX + FX  FRMY = FRMY + FY  FRMW = PEEK(OPPONENT╞DATA╞ADDR + фрм╞оффсет╞в)  FRMH = PEEK(OPPONENT╞DATA╞ADDR + фрм╞оффсет╞х)  ' ITERATE THROUGH HEAD/TORSO/FEET HITBOXES OF OPPONENT  PTR = OPPONENT╞DATA╞ADDR + фрм╞оффсет╞хитбоьес  FOR IDX = 0 TO 2    X1 = PEEK(PTR + 0)    Y1 = PEEK(PTR + 1)    X2 = PEEK(PTR + 2)    Y2 = PEEK(PTR + 3)    GOSUB ADJUST╞COORDS    O╞X1 = X1    O╞Y1 = Y1    O╞X2 = X2    O╞Y2 = Y2    GOSUB CHECK╞BOX╞COLLISION    IF RET% = 1 THEN BEGIN      IF CHARACTER = баддие THEN BEGIN        PLAYER╞ANIM = FORM╞ANIM(PLAYER╞FORM, фаним╞дие)        PLAYER╞FRAME = 0        IF PLAYER╞ENERGY > 0 THEN PLAYER╞ENERGY = PLAYER╞ENERGY - 1        IF PLAYER╞ENERGY = 0 THEN BEGIN          SOUND 1 + PLAYER╞MIRROR * 3, 8000, 50, 1, 435, 100, 0, 4000        BEND:ELSE BEGIN          SOUND 1 + PLAYER╞MIRROR * 3, 8000, 10, 1, 435, 200, 0, 4000        BEND      BEND      IF CHARACTER = плаыер THEN BEGIN        BADDIE╞ANIM = FORM╞ANIM(BADDIE╞FORM, фаним╞дие)        BADDIE╞FRAME = 0        IF BADDIE╞ENERGY > 0 THEN BADDIE╞ENERGY = BADDIE╞ENERGY - 1        IF BADDIE╞ENERGY = 0 THEN BEGIN          SOUND 1 + BADDIE╞MIRROR * 3, 8000, 50, 1, 435, 100, 0, 4000        BEND:ELSE BEGIN          SOUND 1 + BADDIE╞MIRROR * 3, 8000, 10, 1, 435, 200, 0, 4000        BEND      BEND      IDX = 2  ' FORCE BAIL OUT OF FOR-LOOP UPON ANY HIT    BEND    PTR = PTR + 4  NEXT IDX  MIRROR = TMP╞MIRROR  PTR = FRAME╞ADDR(DAT╞IDX, FRAMEIDX)  RETURN'-------------.ADJUST╞COORDS'-------------  IF MIRROR = 0 THEN BEGIN    X1 = FRMX + X1    Y1 = FRMY + Y1    X2 = FRMX + X2    Y2 = FRMY + Y2  BEND:ELSE BEGIN    TMPX1 = X1    X1 = FRMX + FRMW - X2 - 1    Y1 = FRMY + Y1    X2 = FRMX + FRMW - TMPX1 - 1    Y2 = FRMY + Y2  BEND  RETURN'-------------------.CHECK╞BOX╞COLLISION'-------------------  'PRINT "";CHR$(27);"Q";P╞X1;P╞Y1;P╞X2;P╞Y2  'PRINT CHR$(27);"Q";O╞X1;O╞Y1;O╞X2;O╞Y2;  'GET KEY A$  IF NOT ((O╞X1 > P╞X2) OR _          (O╞X2 < P╞X1) OR _          (O╞Y1 > P╞Y2) OR _          (O╞Y2 < P╞Y1)) THEN _  BEGIN    RET% = 1  BEND:ELSE BEGIN    RET% = 0  BEND  RETURN'---------.LOAD╞SONG'---------  DOPEN #2,(SONG$),R,U8  ' LOAD MELODY CHUNKS  ' ------------------  INPUT #2, CHUNK╞CNT  FOR CHUNK╞IDX = 0 TO CHUNK╞CNT - 1    FOR VIDX=0 TO 5      INPUT #2,V$(VIDX, CHUNK╞IDX)    NEXT VIDX  NEXT CHUNK╞IDX  INPUT #2,TMPO%    ' LOAD ENVELOPES  ' --------------  FOR ROW = 0 TO 9    INPUT #2, ENVS╞NAME$(ROW)    INPUT #2, ENVS╞ATTACK(ROW)    INPUT #2, ENVS╞DECAY(ROW)    INPUT #2, ENVS╞SUSTAIN(ROW)    INPUT #2, ENVS╞RELEASE(ROW)    INPUT #2, ENVS╞WAVEFORM(ROW)    INPUT #2, ENVS╞PW(ROW)    GOSUB SET╞ENV  NEXT ROW  PRINT  ' LOAD FILTER PRESETS  ' -------------------  FOR ROW = 0 TO 10    INPUT #2, FILT╞NAME$(ROW)    INPUT #2, FILT╞FREQ(ROW)    INPUT #2, FILT╞LP(ROW)    INPUT #2, FILT╞BP(ROW)    INPUT #2, FILT╞HP(ROW)    INPUT #2, FILT╞RES(ROW)    INPUT #2, FILT╞DIR(ROW)    INPUT #2, FILT╞MIN(ROW)    INPUT #2, FILT╞SWEEP(ROW)  NEXT ROW  ' LOAD SEQUENCE  ' -------------  SEQCNT = 0  INPUT #2, SEQCNT  ROW = 0  DO WHILE ROW < SEQCNT    INPUT #2, SEQ╞CHUNK(ROW)    INPUT #2, SEQ╞EXTRA(ROW)    ROW = ROW + 1  LOOP  DCLOSE #2  CHUNK╞IDX = 0  RETURN'-------.SET╞ENV'-------  ENVELOPE ROW, ENVS╞ATTACK(ROW), ENVS╞DECAY(ROW), ENVS╞SUSTAIN(ROW), ENVS╞RELEASE(ROW), ENVS╞WAVEFORM(ROW), ENVS╞PW(ROW)  RETURN'--------------------.PARSE╞CURRENT╞SEQPTR'--------------------  RET% = 0  IF RPLAY(1)<>0 THEN RET%=1:RETURN  K = SEQ╞CHUNK(PLYPTR)    IF K >= 0 THEN BEGIN    CHUNK╞IDX = K    IF CHUNK╞RPT <= 0 THEN CHUNK╞RPT = SEQ╞EXTRA(PLYPTR)    GOSUB PLAY╞CHUNK╞IDX    'SLEEP .1    RET% = 1  BEND  IF K = цмд╞темпо THEN BEGIN    K = SEQ╞EXTRA(PLYPTR)    TEMPO (K)    TMPO% = K  BEND  IF K = цмд╞филтер THEN BEGIN    K = SEQ╞EXTRA(PLYPTR)    FSROW = K    FSEL = K    GOSUB APPLY╞SELECTED╞FILTER  BEND  IF K = цмд╞ецхо╞м1 THEN ECHO╞M = 1 : ECHO╞DELAY = 0  IF K = цмд╞ецхо╞м2 THEN ECHO╞M = 2 : ECHO╞DELAY = 0  IF K = цмд╞ецхо╞б  THEN ECHO╞B = 1 : ECHO╞DELAY = 0  IF K = цмд╞ецхо╞офф THEN ECHO╞M = 0 : ECHO╞B = 0  IF K = цмд╞ецхо╞сз THEN ECHO╞SZ = SEQ╞EXTRA(PLYPTR)  IF K = цмд╞делаы THEN ECHO╞DELAY = 1 : ECHO╞M = 0 : ECHO╞B = 0  IF K = цмд╞жол THEN V = SEQ╞EXTRA(PLYPTR) : VOL V, V  IF CHUNK╞RPT > 0 THEN CHUNK╞RPT = CHUNK╞RPT - 1  IF CHUNK╞RPT <= 0 THEN PLYPTR = PLYPTR + 1  IF K = цмд╞лооп THEN PLYPTR = 0  IF PLYPTR >= SEQCNT THEN PLYFLAG = 0 : PLYPTR = -1  RETURN'--------------.PLAY╞CHUNK╞IDX'--------------  V1$ = V$(0,CHUNK╞IDX)  V2$ = V$(1,CHUNK╞IDX)  V3$ = V$(2,CHUNK╞IDX)  V4$ = V$(3,CHUNK╞IDX)  V5$ = V$(4,CHUNK╞IDX)  V6$ = V$(5,CHUNK╞IDX)  IF ECHO╞DELAY = 1 THEN BEGIN    PLAY V1$    SLEEP (ECHO╞SZ)    PLAY ,V2$    SLEEP (ECHO╞SZ)    PLAY ,,V3$    SLEEP (ECHO╞SZ)    PLAY ,,,V4$    SLEEP (ECHO╞SZ)    PLAY ,,,,V5$    SLEEP (ECHO╞SZ)    PLAY ,,,,,V6$    SLEEP (ECHO╞SZ)    RETURN  BEND  IF ECHO╞M = 0 AND ECHO╞B = 0 THEN BEGIN    PLAY V1$, V2$, V3$, V4$, V5$, V6$    RETURN  BEND  IF ECHO╞M = 1 AND ECHO╞B = 0 THEN BEGIN    PLAY V1$, V2$, V3$,    , V5$, V6$    SLEEP (ECHO╞SZ)    PLAY    ,    ,    , V1$  BEND  IF ECHO╞M = 1 AND ECHO╞B = 1 THEN BEGIN    PLAY V1$, V2$, V3$,    , V5$    SLEEP (ECHO╞SZ)    PLAY    ,    ,    , V1$,    , V3$  BEND  IF ECHO╞M = 2 AND ECHO╞B = 0 THEN BEGIN    PLAY V1$,    , V3$,    ,    , V6$    SLEEP (ECHO╞SZ)    PLAY    ,    ,    , V1$    SLEEP (ECHO╞SZ)    PLAY    , V1$    SLEEP (ECHO╞SZ)    PLAY    ,    ,    ,    , V1$  BEND  IF ECHO╞M = 2 AND ECHO╞B = 1 THEN BEGIN    PLAY V1$,    , V3$    SLEEP (ECHO╞SZ)    PLAY    ,    ,    , V1$    SLEEP (ECHO╞SZ)    PLAY    , V1$,    ,    ,    , V3$    SLEEP (ECHO╞SZ)    PLAY    ,    ,    ,    , V1$  BEND  RETURN'---------------------.APPLY╞SELECTED╞FILTER'---------------------  IF FSEL = -1 THEN RETURN  CURR╞FREQ = FILT╞FREQ(FSEL)  CURR╞DIR = дир╞ноне  IF   FILT╞DIR(FSEL) = дир╞уп _    OR FILT╞DIR(FSEL) = дир╞осц THEN BEGIN    CURR╞FREQ = FILT╞MIN(FSEL)    CURR╞DIR = дир╞уп  BEND  IF FILT╞DIR(FSEL) = дир╞довн THEN BEGIN    CURR╞DIR = дир╞довн  BEND  FILTER 1, FILT╞FREQ(FSEL), FILT╞LP(FSEL), _          FILT╞BP(FSEL), FILT╞HP(FSEL), FILT╞RES(FSEL)  FILTER 2, FILT╞FREQ(FSEL), FILT╞LP(FSEL), _          FILT╞BP(FSEL), FILT╞HP(FSEL), FILT╞RES(FSEL)  RETURN